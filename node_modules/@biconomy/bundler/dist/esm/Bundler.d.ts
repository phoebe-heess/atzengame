import { type UserOperationStruct } from "@alchemy/aa-core";
import { IBundler } from "./interfaces/IBundler.js";
import { Bundlerconfig, UserOpResponse, UserOpReceipt, UserOpGasResponse, UserOpByHashResponse, GasFeeValues, UserOpStatus, SimulationType } from "./utils/Types.js";
import { StateOverrideSet } from "@biconomy/common";
export declare class Bundler implements IBundler {
    private bundlerConfig;
    UserOpReceiptIntervals: {
        [key in number]?: number;
    };
    UserOpWaitForTxHashIntervals: {
        [key in number]?: number;
    };
    UserOpReceiptMaxDurationIntervals: {
        [key in number]?: number;
    };
    UserOpWaitForTxHashMaxDurationIntervals: {
        [key in number]?: number;
    };
    private provider;
    constructor(bundlerConfig: Bundlerconfig);
    getBundlerUrl(): string;
    estimateUserOpGas(userOp: UserOperationStruct, stateOverrideSet?: StateOverrideSet): Promise<UserOpGasResponse>;
    sendUserOp(userOp: UserOperationStruct, simulationParam?: SimulationType): Promise<UserOpResponse>;
    getUserOpReceipt(userOpHash: string): Promise<UserOpReceipt>;
    getUserOpStatus(userOpHash: string): Promise<UserOpStatus>;
    getUserOpByHash(userOpHash: string): Promise<UserOpByHashResponse>;
    getGasFeeValues(): Promise<GasFeeValues>;
    static create(config: Bundlerconfig): Promise<Bundler>;
}
