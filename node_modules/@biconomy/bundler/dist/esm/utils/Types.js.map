{"version":3,"file":"Types.js","sourceRoot":"","sources":["../../../src/utils/Types.ts"],"names":[],"mappings":"","sourcesContent":["import { UserOperationStruct } from \"@alchemy/aa-core\";\nimport { Chain, Hex } from \"viem\";\n\nexport type Bundlerconfig = {\n  bundlerUrl: string;\n  entryPointAddress?: string;\n  chainId?: number;\n  // eslint-disable-next-line no-unused-vars\n  userOpReceiptIntervals?: { [key in number]?: number };\n  userOpWaitForTxHashIntervals?: { [key in number]?: number };\n  userOpReceiptMaxDurationIntervals?: { [key in number]?: number };\n  userOpWaitForTxHashMaxDurationIntervals?: { [key in number]?: number };\n  /** Can be used to optionally override the chain with a custom chain if it doesn't already exist in viems list of supported chains */\n  viemChain?: Chain;\n};\nexport type BundlerConfigWithChainId = Bundlerconfig & { chainId: number };\n\nexport type UserOpReceipt = {\n  /* The request hash of the UserOperation. */\n  userOpHash: string;\n  /* The entry point address used for the UserOperation. */\n  entryPoint: string;\n  /* The paymaster used for this UserOperation (or empty). */\n  paymaster: string;\n  /* The actual amount paid (by account or paymaster) for this UserOperation. */\n  actualGasCost: Hex;\n  /* The total gas used by this UserOperation (including preVerification, creation, validation, and execution). */\n  actualGasUsed: Hex;\n  /* Indicates whether the execution completed without reverting. */\n  success: \"true\" | \"false\";\n  /* In case of revert, this is the revert reason. */\n  reason: string;\n  /* The logs generated by this UserOperation (not including logs of other UserOperations in the same bundle). */\n  logs: Array<any>; // The logs generated by this UserOperation (not including logs of other UserOperations in the same bundle)\n  /* The TransactionReceipt object for the entire bundle, not only for this UserOperation. */\n  receipt: any;\n};\n\n// review\nexport type UserOpStatus = {\n  state: string; // for now // could be an enum\n  transactionHash?: string;\n  userOperationReceipt?: UserOpReceipt;\n};\n\nexport type SimulationType = \"validation\" | \"validation_and_execution\";\n\n// Converted to JsonRpcResponse with strict type\nexport type GetUserOperationReceiptResponse = {\n  jsonrpc: string;\n  id: number;\n  result: UserOpReceipt;\n  error?: JsonRpcError;\n};\n\nexport type GetUserOperationStatusResponse = {\n  jsonrpc: string;\n  id: number;\n  result: UserOpStatus;\n  error?: JsonRpcError;\n};\n\n// Converted to JsonRpcResponse with strict type\nexport type SendUserOpResponse = {\n  jsonrpc: string;\n  id: number;\n  result: string;\n  error?: JsonRpcError;\n};\n\nexport type UserOpResponse = {\n  userOpHash: string;\n  wait(_confirmations?: number): Promise<UserOpReceipt>;\n  // Review: waitForTxHash(): vs waitForTxHash?():\n  waitForTxHash(): Promise<UserOpStatus>;\n};\n\n// Converted to JsonRpcResponse with strict type\nexport type EstimateUserOpGasResponse = {\n  jsonrpc: string;\n  id: number;\n  result: UserOpGasResponse;\n  error?: JsonRpcError;\n};\n\nexport type UserOpGasResponse = {\n  preVerificationGas: string;\n  verificationGasLimit: string;\n  callGasLimit: string;\n  maxPriorityFeePerGas: string;\n  maxFeePerGas: string;\n};\n\n// Converted to JsonRpcResponse with strict type\nexport type GetUserOpByHashResponse = {\n  jsonrpc: string;\n  id: number;\n  result: UserOpByHashResponse;\n  error?: JsonRpcError;\n};\n\nexport type UserOpByHashResponse = UserOperationStruct & {\n  transactionHash: string;\n  blockNumber: number;\n  blockHash: string;\n  entryPoint: string;\n};\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport type JsonRpcError = {\n  code: string;\n  message: string;\n  data: any;\n};\n\nexport type GetGasFeeValuesResponse = {\n  jsonrpc: string;\n  id: number;\n  result: GasFeeValues;\n  error?: JsonRpcError;\n};\nexport type GasFeeValues = {\n  maxPriorityFeePerGas: string;\n  maxFeePerGas: string;\n};\n"]}