{"version":3,"file":"HelperFunction.js","sourceRoot":"","sources":["../../../src/utils/HelperFunction.ts"],"names":[],"mappings":";;;AAGO,MAAM,eAAe,GAAG,CAAC,MAA2B,EAAuB,EAAE;IAClF,IAAI,CAAC;QACH,MAAM,aAAa,GAAG,EAAE,GAAG,MAAM,EAAE,CAAC;QACpC,MAAM,IAAI,GAAkC;YAC1C,OAAO;YACP,cAAc;YACd,sBAAsB;YACtB,oBAAoB;YACpB,cAAc;YACd,sBAAsB;SACvB,CAAC;QACF,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,IAAI,aAAa,CAAC,GAAG,CAAC,IAAI,aAAa,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC;gBACtD,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAiB,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAkB,CAAC;YAClG,CAAC;QACH,CAAC;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,uCAAuC,KAAK,EAAE,CAAC;IACvD,CAAC;AACH,CAAC,CAAC;AApBW,QAAA,eAAe,mBAoB1B;AAMK,MAAM,qBAAqB,GAAG,GAAW,EAAE;IAChD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;AACvC,CAAC,CAAC;AAFW,QAAA,qBAAqB,yBAEhC","sourcesContent":["import type { BigNumberish, UserOperationStruct } from \"@alchemy/aa-core\";\n\n// Will convert the userOp hex, bigInt and number values to hex strings\nexport const transformUserOP = (userOp: UserOperationStruct): UserOperationStruct => {\n  try {\n    const userOperation = { ...userOp };\n    const keys: (keyof UserOperationStruct)[] = [\n      \"nonce\",\n      \"callGasLimit\",\n      \"verificationGasLimit\",\n      \"preVerificationGas\",\n      \"maxFeePerGas\",\n      \"maxPriorityFeePerGas\",\n    ];\n    for (const key of keys) {\n      if (userOperation[key] && userOperation[key] !== \"0x\") {\n        userOperation[key] = (\"0x\" + BigInt(userOp[key] as BigNumberish).toString(16)) as `0x${string}`;\n      }\n    }\n    return userOperation;\n  } catch (error) {\n    throw `Failed to transform user operation: ${error}`;\n  }\n};\n\n/**\n * @description this function will return current timestamp in seconds\n * @returns Number\n */\nexport const getTimestampInSeconds = (): number => {\n  return Math.floor(Date.now() / 1000);\n};\n"]}