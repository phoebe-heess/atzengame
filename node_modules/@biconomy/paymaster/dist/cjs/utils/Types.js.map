{"version":3,"file":"Types.js","sourceRoot":"","sources":["../../../src/utils/Types.ts"],"names":[],"mappings":";;;AAyIA,IAAY,aAGX;AAHD,WAAY,aAAa;IACvB,gCAAe,CAAA;IACf,wCAAuB,CAAA;AACzB,CAAC,EAHW,aAAa,6BAAb,aAAa,QAGxB","sourcesContent":["import { BigNumberish } from \"@alchemy/aa-core\";\nexport type Hex = `0x${string}`;\n\nexport type PaymasterServiceErrorResponse = {\n  jsonrpc: string;\n  id: number;\n  error: JsonRpcError;\n};\n\nexport type JsonRpcResponse = {\n  jsonrpc: string;\n  id: number;\n  result?: any;\n  error?: JsonRpcError;\n};\n\nexport type JsonRpcError = {\n  code: string;\n  message: string;\n  data: any;\n};\n\nexport type PaymasterConfig = {\n  paymasterUrl: string;\n  strictMode?: boolean;\n};\n\nexport type SponsorUserOperationDto = {\n  /** mode: sponsored or erc20 */\n  mode: PaymasterMode;\n  /** Always recommended, especially when using token paymaster */\n  calculateGasLimits?: boolean;\n  /** Expiry duration in seconds */\n  expiryDuration?: number;\n  /** Webhooks to be fired after user op is sent */\n  webhookData?: Record<string, any>;\n  /** Smart account meta data */\n  smartAccountInfo?: SmartAccountData;\n  /** the fee-paying token address */\n  feeTokenAddress?: string;\n};\n\nexport type FeeQuotesOrDataDto = {\n  /** mode: sponsored or erc20 */\n  mode?: PaymasterMode;\n  /** Expiry duration in seconds */\n  expiryDuration?: number;\n  /** Always recommended, especially when using token paymaster */\n  calculateGasLimits?: boolean;\n  /** List of tokens to be used for fee quotes, if ommitted fees for all supported will be returned */\n  tokenList?: string[];\n  /** preferredToken: Can be ommitted to return all quotes */\n  preferredToken?: string;\n  /** Webhooks to be fired after user op is sent */\n  webhookData?: Record<string, any>;\n  /** Smart account meta data */\n  smartAccountInfo?: SmartAccountData;\n};\n\nexport type FeeQuoteParams = {\n  tokenList?: string[];\n  preferredToken?: string;\n};\n\nexport type FeeTokenInfo = {\n  feeTokenAddress: string;\n};\n\nexport type SponsorpshipInfo = {\n  /** Webhooks to be fired after user op is sent */\n  webhookData?: Record<string, any>;\n  /** Smart account meta data */\n  smartAccountInfo: SmartAccountData;\n};\n\nexport type SmartAccountData = {\n  /** name: Name of the smart account */\n  name: string;\n  /** version: Version of the smart account */\n  version: string;\n};\n\nexport type PaymasterFeeQuote = {\n  /** symbol: Token symbol */\n  symbol: string;\n  /** tokenAddress: Token address */\n  tokenAddress: string;\n  /** decimal: Token decimal */\n  decimal: number;\n  logoUrl?: string;\n  /** maxGasFee: in wei */\n  maxGasFee: number;\n  /** maxGasFee: in dollars */\n  maxGasFeeUSD?: number;\n  usdPayment?: number;\n  /** The premium paid on the token */\n  premiumPercentage: number;\n  /** validUntil: Unix timestamp */\n  validUntil?: number;\n};\n\nexport type BiconomyTokenPaymasterRequest = {\n  /** The feeQuote to be used for the transaction */\n  feeQuote: PaymasterFeeQuote;\n  /** The address of the spender. This is usually set to {@link FeeQuotesOrDataResponse.tokenPaymasterAddress}  */\n  spender: Hex;\n  /** Not recommended */\n  maxApproval?: boolean;\n  /* skip option to patch callData if approval is already given to the paymaster */\n  skipPatchCallData?: boolean;\n};\n\nexport type FeeQuotesOrDataResponse = {\n  /** Array of results from the paymaster */\n  feeQuotes?: PaymasterFeeQuote[];\n  /** Normally set to the spender in the proceeding call to send the tx */\n  tokenPaymasterAddress?: Hex;\n  /** Relevant Data returned from the paymaster */\n  paymasterAndData?: Uint8Array | Hex;\n  /* Gas overhead of this UserOperation */\n  preVerificationGas?: BigNumberish;\n  /* Actual gas used by the validation of this UserOperation */\n  verificationGasLimit?: BigNumberish;\n  /* Value used by inner account execution */\n  callGasLimit?: BigNumberish;\n};\n\nexport type PaymasterAndDataResponse = {\n  paymasterAndData: Hex;\n  /* Gas overhead of this UserOperation */\n  preVerificationGas: number;\n  /* Actual gas used by the validation of this UserOperation */\n  verificationGasLimit: number;\n  /* Value used by inner account execution */\n  callGasLimit: number;\n};\n\nexport enum PaymasterMode {\n  ERC20 = \"ERC20\",\n  SPONSORED = \"SPONSORED\",\n}\n\n// Converted to JsonRpcResponse with strict type\nexport type EstimateUserOpGasResponse = {\n  jsonrpc: string;\n  id: number;\n  result: UserOpGasResponse;\n  error?: JsonRpcError;\n};\n\nexport type UserOpGasResponse = {\n  paymasterAndData: string;\n  /* Gas overhead of this UserOperation */\n  preVerificationGas: string;\n  maxPriorityFeePerGas: string;\n  maxFeePerGas: string;\n  /* Actual gas used by the validation of this UserOperation */\n  verificationGasLimit: string;\n  callGasLimit: string;\n};\n\ntype RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\n  {\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;\n  }[Keys];\n\ntype ValueOrData = RequireAtLeastOne<\n  {\n    value: BigNumberish | string;\n    data: string;\n  },\n  \"value\" | \"data\"\n>;\nexport type Transaction = {\n  to: string;\n} & ValueOrData;\n"]}