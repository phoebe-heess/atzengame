import type { UserOperationStruct } from "@alchemy/aa-core";
import { PaymasterConfig, FeeQuotesOrDataResponse, FeeQuotesOrDataDto, SponsorUserOperationDto, BiconomyTokenPaymasterRequest, PaymasterAndDataResponse, Transaction } from "./utils/Types.js";
import { IHybridPaymaster } from "./interfaces/IHybridPaymaster.js";
export declare class BiconomyPaymaster implements IHybridPaymaster<SponsorUserOperationDto> {
    paymasterConfig: PaymasterConfig;
    constructor(config: PaymasterConfig);
    private prepareUserOperation;
    buildTokenApprovalTransaction(tokenPaymasterRequest: BiconomyTokenPaymasterRequest): Promise<Transaction>;
    getPaymasterFeeQuotesOrData(userOp: Partial<UserOperationStruct>, paymasterServiceData: FeeQuotesOrDataDto): Promise<FeeQuotesOrDataResponse>;
    getPaymasterAndData(userOp: Partial<UserOperationStruct>, paymasterServiceData?: SponsorUserOperationDto): Promise<PaymasterAndDataResponse>;
    getDummyPaymasterAndData(_userOp: Partial<UserOperationStruct>, _paymasterServiceData?: SponsorUserOperationDto): Promise<string>;
    static create(config: PaymasterConfig): Promise<BiconomyPaymaster>;
}
