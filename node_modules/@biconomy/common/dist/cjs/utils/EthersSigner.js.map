{"version":3,"file":"EthersSigner.js","sourceRoot":"","sources":["../../../src/utils/EthersSigner.ts"],"names":[],"mappings":";;;;;;;;;AAIA,MAAa,YAAY;IAKvB,YAAY,KAAQ,EAAE,UAAkB;QAJxC;;;;mBAAqB,QAAQ;WAAC;QAE9B;;;;;WAAS;QAqBT,yCAAoB,CAAC,SAAc,EAAO,EAAE;YAC1C,MAAM,qBAAqB,GAAG,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAChE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,qBAAqB,CAAC,EAAE,CAAC;gBAC9C,MAAM,QAAQ,GAAG,qBAAqB,GAAG,EAAE,CAAC;gBAC5C,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC7D,CAAC;YACD,OAAO,SAAS,CAAC;QACnB,CAAC,EAAC;QAzBA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,UAAU;QACd,OAAO,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAQ,CAAC;IAChD,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,QAAyB;QACzC,MAAM,OAAO,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC;QACvE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;QACzD,OAAO,uBAAA,IAAI,sCAAkB,MAAtB,IAAI,EAAmB,SAAgB,CAAC,CAAC;IAClD,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,QAAa;QAC/B,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACtE,CAAC;CAUF;AAhCD,oCAgCC;;AAED,kBAAe,YAAY,CAAC","sourcesContent":["import { SmartAccountSigner } from \"@alchemy/aa-core\";\nimport { Hex, SignableMessage } from \"viem\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\n\nexport class EthersSigner<T extends Signer> implements SmartAccountSigner<T> {\n  signerType: string = \"ethers\";\n\n  inner: T;\n\n  constructor(inner: T, signerType: string) {\n    this.inner = inner;\n    this.signerType = signerType;\n  }\n\n  async getAddress() {\n    return (await this.inner.getAddress()) as Hex;\n  }\n\n  async signMessage(_message: SignableMessage): Promise<Hex> {\n    const message = typeof _message === \"string\" ? _message : _message.raw;\n    const signature = await this.inner?.signMessage(message);\n    return this.#correctSignature(signature as Hex);\n  }\n\n  async signTypedData(_notUsed: any): Promise<Hex> {\n    throw new Error(\"signTypedData is not supported for Ethers Signer\");\n  }\n\n  #correctSignature = (signature: Hex): Hex => {\n    const potentiallyIncorrectV = parseInt(signature.slice(-2), 16);\n    if (![27, 28].includes(potentiallyIncorrectV)) {\n      const correctV = potentiallyIncorrectV + 27;\n      signature = signature.slice(0, -2) + correctV.toString(16);\n    }\n    return signature;\n  };\n}\n\nexport default EthersSigner;\n"]}