{"version":3,"file":"convertSigner.js","sourceRoot":"","sources":["../../../../src/utils/Helpers/convertSigner.ts"],"names":[],"mappings":";;;AAAA,wDAAkD;AAGlD,8CAA0E;AAC1E,kDAA+D;AASxD,MAAM,aAAa,GAAG,KAAK,EAAE,MAAuB,EAAE,mBAA4B,KAAK,EAA+B,EAAE;IAC7H,IAAI,0BAA8C,CAAC;IACnD,IAAI,MAAM,GAAkB,IAAI,CAAC;IACjC,IAAI,OAAO,GAAkB,IAAI,CAAC;IAClC,MAAM,iBAAiB,GAAG,2CAA4B,CAAC,OAAO,IAAI,MAAM,CAAC;IACzE,MAAM,gBAAgB,GAAG,2CAA4B,CAAC,MAAM,IAAI,MAAM,CAAC;IACvE,MAAM,aAAa,GAAG,2CAA4B,CAAC,IAAI,IAAI,MAAM,CAAC;IAElE,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACvB,IAAI,gBAAgB,EAAE,CAAC;YACrB,MAAM,YAAY,GAAG,MAAgB,CAAC;YACtC,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAEtB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;oBAC3B,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;gBACxE,CAAC;gBACD,MAAM,mBAAmB,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;gBACrE,IAAI,CAAC,mBAAmB,EAAE,OAAO,EAAE,CAAC;oBAClC,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;gBACvE,CAAC;gBACD,OAAO,GAAG,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAChD,CAAC;YAED,0BAA0B,GAAG,IAAI,8BAAY,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;YAEtE,MAAM,GAAG,YAAY,CAAC,QAAQ,EAAE,UAAU,EAAE,GAAG,IAAI,IAAI,CAAC;QAC1D,CAAC;aAAM,IAAI,aAAa,EAAE,CAAC;YACzB,MAAM,YAAY,GAAG,MAAsB,CAAC;YAC5C,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;gBAC1B,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;YACrE,CAAC;YACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAEtB,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;oBACxB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;gBACpE,CAAC;gBACD,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC;YAClC,CAAC;YAED,0BAA0B,GAAG,IAAI,4BAAkB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YAC1E,MAAM,GAAG,YAAY,EAAE,SAAS,EAAE,GAAG,IAAI,IAAI,CAAC;QAChD,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;SAAM,CAAC;QACN,0BAA0B,GAAG,MAA4B,CAAC;IAC5D,CAAC;IACD,OAAO,EAAE,MAAM,EAAE,0BAA0B,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC;AACjE,CAAC,CAAC;AAhDW,QAAA,aAAa,iBAgDxB","sourcesContent":["import { EthersSigner } from \"../EthersSigner.js\";\nimport { SupportedSigner } from \"../Types.js\";\nimport { WalletClient } from \"viem\";\nimport { WalletClientSigner, SmartAccountSigner } from \"@alchemy/aa-core\";\nimport { UNIQUE_PROPERTIES_PER_SIGNER } from \"../Constants.js\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\n\ninterface SmartAccountResult {\n  signer: SmartAccountSigner;\n  chainId: number | null;\n  rpcUrl: string | null;\n}\n\nexport const convertSigner = async (signer: SupportedSigner, skipChainIdCalls: boolean = false): Promise<SmartAccountResult> => {\n  let resolvedSmartAccountSigner: SmartAccountSigner;\n  let rpcUrl: string | null = null;\n  let chainId: number | null = null;\n  const isAnAlchemySigner = UNIQUE_PROPERTIES_PER_SIGNER.alchemy in signer;\n  const isAnEthersSigner = UNIQUE_PROPERTIES_PER_SIGNER.ethers in signer;\n  const isAViemSigner = UNIQUE_PROPERTIES_PER_SIGNER.viem in signer;\n\n  if (!isAnAlchemySigner) {\n    if (isAnEthersSigner) {\n      const ethersSigner = signer as Signer;\n      if (!skipChainIdCalls) {\n        // If chainId not provided, get it from walletClient\n        if (!ethersSigner.provider) {\n          throw new Error(\"Cannot consume an ethers Wallet without a provider\");\n        }\n        const chainIdFromProvider = await ethersSigner.provider.getNetwork();\n        if (!chainIdFromProvider?.chainId) {\n          throw new Error(\"Cannot consume an ethers Wallet without a chainId\");\n        }\n        chainId = Number(chainIdFromProvider.chainId);\n      }\n      // convert ethers Wallet to alchemy's SmartAccountSigner under the hood\n      resolvedSmartAccountSigner = new EthersSigner(ethersSigner, \"ethers\");\n      // @ts-ignore\n      rpcUrl = ethersSigner.provider?.connection?.url ?? null;\n    } else if (isAViemSigner) {\n      const walletClient = signer as WalletClient;\n      if (!walletClient.account) {\n        throw new Error(\"Cannot consume a viem wallet without an account\");\n      }\n      if (!skipChainIdCalls) {\n        // If chainId not provided, get it from walletClient\n        if (!walletClient.chain) {\n          throw new Error(\"Cannot consume a viem wallet without a chainId\");\n        }\n        chainId = walletClient.chain.id;\n      }\n      // convert viems walletClient to alchemy's SmartAccountSigner under the hood\n      resolvedSmartAccountSigner = new WalletClientSigner(walletClient, \"viem\");\n      rpcUrl = walletClient?.transport?.url ?? null;\n    } else {\n      throw new Error(\"Unsupported signer\");\n    }\n  } else {\n    resolvedSmartAccountSigner = signer as SmartAccountSigner;\n  }\n  return { signer: resolvedSmartAccountSigner, rpcUrl, chainId };\n};\n"]}