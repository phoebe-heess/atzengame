{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../../src/utils/Logger.ts"],"names":[],"mappings":";;;AAMA,MAAM,MAAM;IAYV,MAAM,CAAC,GAAG,CAAC,OAAe,EAAE,KAAW;QACrC,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,MAAM,UAAU,GAAG,YAAY,SAAS,oBAAoB,OAAO,UAAU,CAAC;QAE9E,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;IAGD,MAAM,CAAC,IAAI,CAAC,OAAe,EAAE,KAAW;QACtC,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,MAAM,WAAW,GAAG,YAAY,SAAS,yCAAyC,OAAO,SAAS,CAAC;QAEnG,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,OAAe,EAAE,KAAW;QACvC,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,MAAM,YAAY,GAAG,YAAY,SAAS,0CAA0C,OAAO,SAAS,CAAC;QAErG,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,OAAO,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAChE,CAAC;IACH,CAAC;;AAGM,wBAAM;AAxCN;;;;WAAmB,OAAO,CAAC,GAAG,CAAC,kBAAkB,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,4BAA4B,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;GAAC","sourcesContent":["/* eslint-disable no-console */\n/**\n * Single class to be used for logging purpose.\n *\n * @param {any} message Message to be logged\n */\nclass Logger {\n  // By default, the logger is not in debug mode.\n  static isDebug: boolean = process.env.BICONOMY_SDK_DEBUG === \"true\" ? true : process.env.REACT_APP_BICONOMY_SDK_DEBUG === \"true\" ? true : false;\n\n  /**\n   * \\x1b[0m is an escape sequence to reset the color of the text\n   * All color codes used - 31 - Red, 33 - Yellow, 34 - Blue, 35 - Magenta, 36 - Cyan\n   * log -   Magenta[time]               Cyan[message]:  [value]\n   * warn -  Magenta[time] Yellow[WARN]: Cyan[message]:  [value]\n   * error - Magenta[time] Red[ERROR]:   Cyan[message]:  [value]\n   */\n  /* eslint-disable  @typescript-eslint/no-explicit-any */\n  static log(message: string, value?: any): void {\n    const timestamp = new Date().toISOString();\n    const logMessage = `\\x1b[35m[${timestamp}]\\x1b[0m \\x1b[36m${message}\\x1b[0m:`;\n\n    if (Logger.isDebug) {\n      console.log(logMessage, value === undefined ? \"\" : value);\n    }\n  }\n\n  /* eslint-disable  @typescript-eslint/no-explicit-any */\n  static warn(message: string, value?: any): void {\n    const timestamp = new Date().toISOString();\n    const warnMessage = `\\x1b[35m[${timestamp}]\\x1b[0m \\x1b[33mWARN\\x1b[0m: \\x1b[36m${message}\\x1b[0m`;\n\n    if (Logger.isDebug) {\n      console.warn(warnMessage, value === undefined ? \"\" : value);\n    }\n  }\n\n  /* eslint-disable  @typescript-eslint/no-explicit-any */\n  static error(message: string, value?: any): void {\n    const timestamp = new Date().toISOString();\n    const errorMessage = `\\x1b[35m[${timestamp}]\\x1b[0m \\x1b[31mERROR\\x1b[0m: \\x1b[36m${message}\\x1b[0m`;\n\n    if (Logger.isDebug) {\n      console.error(errorMessage, value === undefined ? \"\" : value);\n    }\n  }\n}\n\nexport { Logger };\n"]}