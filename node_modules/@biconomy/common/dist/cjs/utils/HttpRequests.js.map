{"version":3,"file":"HttpRequests.js","sourceRoot":"","sources":["../../../src/utils/HttpRequests.ts"],"names":[],"mappings":";;;AAAA,2CAAqC;AAGrC,IAAY,UAIX;AAJD,WAAY,UAAU;IACpB,yBAAW,CAAA;IACX,2BAAa,CAAA;IACb,+BAAiB,CAAA;AACnB,CAAC,EAJW,UAAU,0BAAV,UAAU,QAIrB;AASM,KAAK,UAAU,WAAW,CAAI,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAe,EAAE,OAAgB;IACvF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;QAChC,MAAM;QACN,OAAO,EAAE;YACP,MAAM,EAAE,kBAAkB;YAC1B,cAAc,EAAE,kBAAkB;SACnC;QACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;KAC3B,CAAC,CAAC;IAEH,IAAI,YAAY,CAAC;IACjB,IAAI,CAAC;QACH,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrC,kBAAM,CAAC,GAAG,CAAC,GAAG,OAAO,eAAe,EAAE,YAAY,CAAC,CAAC;IACtD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACvC,CAAC;IACH,CAAC;IAED,IAAI,QAAQ,CAAC,EAAE,EAAE,CAAC;QAChB,OAAO,YAAiB,CAAC;IAC3B,CAAC;IACD,IAAI,YAAY,CAAC,KAAK,EAAE,CAAC;QACvB,MAAM,IAAI,KAAK,CAAC,qBAAqB,OAAO,KAAK,YAAY,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACjF,CAAC;IACD,IAAI,YAAY,CAAC,OAAO,EAAE,CAAC;QACzB,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IACD,IAAI,YAAY,CAAC,GAAG,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;IACD,IAAI,YAAY,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IACD,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC;QACxB,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IACD,IAAI,YAAY,CAAC,OAAO,EAAE,CAAC;QACzB,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IACD,IAAI,YAAY,CAAC,cAAc,EAAE,CAAC;QAChC,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;IAC/C,CAAC;IACD,IAAI,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IACD,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AACvC,CAAC;AAhDD,kCAgDC","sourcesContent":["import { Logger } from \"./Logger.js\";\nimport { Service } from \"./Types.js\";\n\nexport enum HttpMethod {\n  Get = \"get\",\n  Post = \"post\",\n  Delete = \"delete\",\n}\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport interface HttpRequest {\n  url: string;\n  method: HttpMethod;\n  body?: Record<string, any>;\n}\n\nexport async function sendRequest<T>({ url, method, body }: HttpRequest, service: Service): Promise<T> {\n  const response = await fetch(url, {\n    method,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n\n  let jsonResponse;\n  try {\n    jsonResponse = await response.json();\n    Logger.log(`${service} RPC Response`, jsonResponse);\n  } catch (error) {\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  }\n\n  if (response.ok) {\n    return jsonResponse as T;\n  }\n  if (jsonResponse.error) {\n    throw new Error(`Error coming from ${service}: ${jsonResponse.error.message}`);\n  }\n  if (jsonResponse.message) {\n    throw new Error(jsonResponse.message);\n  }\n  if (jsonResponse.msg) {\n    throw new Error(jsonResponse.msg);\n  }\n  if (jsonResponse.data) {\n    throw new Error(jsonResponse.data);\n  }\n  if (jsonResponse.detail) {\n    throw new Error(jsonResponse.detail);\n  }\n  if (jsonResponse.message) {\n    throw new Error(jsonResponse.message);\n  }\n  if (jsonResponse.nonFieldErrors) {\n    throw new Error(jsonResponse.nonFieldErrors);\n  }\n  if (jsonResponse.delegate) {\n    throw new Error(jsonResponse.delegate);\n  }\n  throw new Error(response.statusText);\n}\n"]}