{"version":3,"file":"smartAccountClient.js","sourceRoot":"","sources":["../../../../src/client/decorators/smartAccountClient.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  type Address,\n  type Chain,\n  type Client,\n  type Hex,\n  type SendTransactionParameters,\n  type Transport,\n  type TypedData,\n} from \"viem\";\nimport type {\n  GetAccountParameter,\n  GetEntryPointFromAccount,\n  SmartContractAccount,\n} from \"../../account/smartContractAccount\";\nimport { buildUserOperation } from \"../../actions/smartAccount/buildUserOperation.js\";\nimport { buildUserOperationFromTx } from \"../../actions/smartAccount/buildUserOperationFromTx.js\";\nimport { buildUserOperationFromTxs } from \"../../actions/smartAccount/buildUserOperationFromTxs.js\";\nimport { checkGasSponsorshipEligibility } from \"../../actions/smartAccount/checkGasSponsorshipEligibility.js\";\nimport { dropAndReplaceUserOperation } from \"../../actions/smartAccount/dropAndReplaceUserOperation.js\";\nimport { getAddress } from \"../../actions/smartAccount/getAddress.js\";\nimport { sendTransaction } from \"../../actions/smartAccount/sendTransaction.js\";\nimport { sendTransactions } from \"../../actions/smartAccount/sendTransactions.js\";\nimport { sendUserOperation } from \"../../actions/smartAccount/sendUserOperation.js\";\nimport {\n  signMessage,\n  type SignMessageParameters,\n} from \"../../actions/smartAccount/signMessage.js\";\nimport { signMessageWith6492 } from \"../../actions/smartAccount/signMessageWith6492.js\";\nimport {\n  signTypedData,\n  type SignTypedDataParameters,\n} from \"../../actions/smartAccount/signTypedData.js\";\nimport { signTypedDataWith6492 } from \"../../actions/smartAccount/signTypedDataWith6492.js\";\nimport { signUserOperation } from \"../../actions/smartAccount/signUserOperation.js\";\nimport type {\n  BuildTransactionParameters,\n  BuildUserOperationFromTransactionsResult,\n  BuildUserOperationParameters,\n  DropAndReplaceUserOperationParameters,\n  SendTransactionsParameters,\n  SendUserOperationParameters,\n  SignUserOperationParameters,\n  UpgradeAccountParams,\n  UserOperationContext,\n  WaitForUserOperationTxParameters,\n} from \"../../actions/smartAccount/types\";\nimport { upgradeAccount } from \"../../actions/smartAccount/upgradeAccount.js\";\nimport { waitForUserOperationTransaction } from \"../../actions/smartAccount/waitForUserOperationTransacation.js\";\nimport type {\n  UserOperationOverrides,\n  UserOperationRequest,\n  UserOperationStruct,\n} from \"../../types\";\nimport type { IsUndefined } from \"../../utils\";\nimport type { SendUserOperationResult } from \"../types\";\n\n//#region SmartAccountClientActions\nexport type BaseSmartAccountClientActions<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined,\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>\n> = {\n  buildUserOperation: (\n    args: BuildUserOperationParameters<TAccount, TContext>\n  ) => Promise<UserOperationStruct<TEntryPointVersion>>;\n  buildUserOperationFromTx: (\n    args: SendTransactionParameters<TChain, TAccount>,\n    overrides?: UserOperationOverrides<TEntryPointVersion>,\n    context?: TContext\n  ) => Promise<UserOperationStruct<TEntryPointVersion>>;\n  buildUserOperationFromTxs: (\n    args: BuildTransactionParameters<TAccount, TContext>\n  ) => Promise<BuildUserOperationFromTransactionsResult<TEntryPointVersion>>;\n  checkGasSponsorshipEligibility: <\n    TContext extends UserOperationContext | undefined =\n      | UserOperationContext\n      | undefined\n  >(\n    args: SendUserOperationParameters<TAccount, TContext>\n  ) => Promise<boolean>;\n  signUserOperation: (\n    args: SignUserOperationParameters<TAccount, TEntryPointVersion, TContext>\n  ) => Promise<UserOperationRequest<TEntryPointVersion>>;\n  dropAndReplaceUserOperation: (\n    args: DropAndReplaceUserOperationParameters<TAccount, TContext>\n  ) => Promise<SendUserOperationResult<TEntryPointVersion>>;\n  // TODO: for v4 we should combine override and context into an `opts` parameter\n  // which wraps both of these properties so we can use GetContextParameter\n  sendTransaction: <TChainOverride extends Chain | undefined = undefined>(\n    args: SendTransactionParameters<TChain, TAccount, TChainOverride>,\n    overrides?: UserOperationOverrides<TEntryPointVersion>,\n    context?: TContext\n  ) => Promise<Hex>;\n  sendTransactions: (\n    args: SendTransactionsParameters<TAccount, TContext>\n  ) => Promise<Hex>;\n  sendUserOperation: (\n    args: SendUserOperationParameters<\n      TAccount,\n      TContext,\n      GetEntryPointFromAccount<TAccount>\n    >\n  ) => Promise<SendUserOperationResult<TEntryPointVersion>>;\n  waitForUserOperationTransaction: (\n    args: WaitForUserOperationTxParameters\n  ) => Promise<Hex>;\n  upgradeAccount: (\n    args: UpgradeAccountParams<TAccount, TContext>\n  ) => Promise<Hex>;\n  signMessage: (args: SignMessageParameters<TAccount>) => Promise<Hex>;\n  signTypedData: <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string = string\n  >(\n    args: SignTypedDataParameters<TTypedData, TPrimaryType, TAccount>\n  ) => Promise<Hex>;\n  signMessageWith6492: (args: SignMessageParameters<TAccount>) => Promise<Hex>;\n  signTypedDataWith6492: <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string = string\n  >(\n    args: SignTypedDataParameters<TTypedData, TPrimaryType, TAccount>\n  ) => Promise<Hex>;\n} & (IsUndefined<TAccount> extends false\n  ? { getAddress: () => Address }\n  : {\n      getAddress: (args: GetAccountParameter<TAccount>) => Address;\n    });\n// #endregion SmartAccountClientActions\n\nexport const smartAccountClientActions: <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>\n) => BaseSmartAccountClientActions<TChain, TAccount, TContext> = (client) => ({\n  buildUserOperation: (args) => buildUserOperation(client, args),\n  buildUserOperationFromTx: (args, overrides, context) =>\n    buildUserOperationFromTx(client, args, overrides, context),\n  buildUserOperationFromTxs: (args) => buildUserOperationFromTxs(client, args),\n  checkGasSponsorshipEligibility: (args) =>\n    checkGasSponsorshipEligibility(client, args),\n  signUserOperation: (args) => signUserOperation(client, args),\n  dropAndReplaceUserOperation: (args) =>\n    dropAndReplaceUserOperation(client, args),\n  sendTransaction: (args, overrides, context) =>\n    sendTransaction(client, args, overrides, context),\n  sendTransactions: (args) => sendTransactions(client, args),\n  sendUserOperation: (args) => sendUserOperation(client, args),\n  waitForUserOperationTransaction: (args) =>\n    waitForUserOperationTransaction.bind(client)(client, args),\n  upgradeAccount: (args) => upgradeAccount(client, args),\n  getAddress: (args) => getAddress(client, args),\n  signMessage: (args) => signMessage(client, args),\n  signTypedData: (args) => signTypedData(client, args),\n  signMessageWith6492: (args) => signMessageWith6492(client, args),\n  signTypedDataWith6492: (args) => signTypedDataWith6492(client, args),\n});\n\nexport const smartAccountClientMethodKeys = Object.keys(\n  // @ts-expect-error we just want to get the keys\n  smartAccountClientActions(undefined)\n).reduce((accum, curr) => {\n  accum.add(curr);\n  return accum;\n}, new Set<string>());\n"]}