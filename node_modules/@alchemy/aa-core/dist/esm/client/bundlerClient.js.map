{"version":3,"file":"bundlerClient.js","sourceRoot":"","sources":["../../../src/client/bundlerClient.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,YAAY,EACZ,IAAI,EACJ,aAAa,GAUd,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,kBAAkB,EAAE,MAAM,qBAAqB,CAAC;AACzD,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AACxC,OAAO,EACL,cAAc,GAGf,MAAM,+BAA+B,CAAC;AAWvC,MAAM,CAAC,MAAM,+BAA+B,GAIpB,CACtB,MAA8B,EACZ,EAAE;IACpB,OAAO,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;AACvC,CAAC,CAAC;AAaF,MAAM,UAAU,mBAAmB,CACjC,IAA4C;IAE5C,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAChB,MAAM,IAAI,kBAAkB,EAAE,CAAC;IACjC,CAAC;IACD,MAAM,EACJ,GAAG,GAAG,gBAAgB,EACtB,IAAI,GAAG,uBAAuB,EAC9B,IAAI,GAAG,eAAe,GACvB,GAAG,IAAI,CAAC;IAET,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,EAAE,GAAG,IAAI,CAAC;IACpC,MAAM,iBAAiB,GAAG,SAAS,CAAC;QAClC,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,eAAe,EAAE,IAAI,CAAC,eAAe;KACtC,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG;QACrB,GAAG,IAAI;QACP,GAAG;QACH,IAAI;QACJ,IAAI;KACL,CAAC;IAEF,MAAM,MAAM,GAAG,CAAC,GAAG,EAAE;QACnB,IAAI,iBAAiB,CAAC,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YAC7C,MAAM,EAAE,GAAG,EAAE,YAAY,EAAE,aAAa,EAAE,GAAG,iBAAiB,CAAC,KAG9D,CAAC;YAEF,MAAM,YAAY,GAAG,aAAa,IAAI,EAAE,CAAC;YAEzC,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;gBAC9C,YAAY,CAAC,OAAO,GAAG;oBACrB,GAAG,YAAY,CAAC,OAAO;oBACvB,wBAAwB,EAAE,OAAO;iBAClC,CAAC;YACJ,CAAC;YAED,OAAO,YAAY,CAAmB;gBACpC,GAAG,cAAc;gBACjB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;oBACnB,GAAG,iBAAiB,CAAC,MAAM;oBAC3B,YAAY;iBACb,CAAC;aACH,CAAC,CAAC;QACL,CAAC;QAED,OAAO,YAAY,CAAmB,cAAc,CAAC,CAAC;IACxD,CAAC,CAAC,EAAE,CAAC;IAEL,OAAO,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;AAC7D,CAAC","sourcesContent":["import {\n  createClient,\n  http,\n  publicActions,\n  type Chain,\n  type Client,\n  type FallbackTransport,\n  type HttpTransportConfig,\n  type PublicActions,\n  type PublicClient,\n  type PublicClientConfig,\n  type PublicRpcSchema,\n  type Transport,\n} from \"viem\";\nimport { ChainNotFoundError } from \"../errors/client.js\";\nimport { VERSION } from \"../version.js\";\nimport {\n  bundlerActions,\n  type BundlerActions,\n  type BundlerRpcSchema,\n} from \"./decorators/bundlerClient.js\";\n\n// [!region BundlerClient]\nexport type BundlerClient<T extends Transport = Transport> = Client<\n  T,\n  Chain,\n  undefined,\n  [...PublicRpcSchema, ...BundlerRpcSchema],\n  PublicActions<T, Chain> & BundlerActions\n>;\n\nexport const createBundlerClientFromExisting: <\n  T extends Transport | FallbackTransport = Transport\n>(\n  client: PublicClient<T, Chain>\n) => BundlerClient<T> = <T extends Transport | FallbackTransport = Transport>(\n  client: PublicClient<T, Chain>\n): BundlerClient<T> => {\n  return client.extend(bundlerActions);\n};\n// [!endregion BundlerClient]\n\n/**\n * Creates a PublicClient with methods for calling Bundler RPC methods\n *\n * @param args - configuration for the client\n * @returns a PublicClient with methods for calling Bundler RPC methods\n */\nexport function createBundlerClient<TTransport extends Transport>(\n  args: PublicClientConfig<TTransport, Chain> & { type?: string }\n): BundlerClient<TTransport>;\n\nexport function createBundlerClient(\n  args: PublicClientConfig & { type?: string }\n): BundlerClient {\n  if (!args.chain) {\n    throw new ChainNotFoundError();\n  }\n  const {\n    key = \"bundler-public\",\n    name = \"Public Bundler Client\",\n    type = \"bundlerClient\",\n  } = args;\n\n  const { transport, ...opts } = args;\n  const resolvedTransport = transport({\n    chain: args.chain,\n    pollingInterval: opts.pollingInterval,\n  });\n\n  const baseParameters = {\n    ...args,\n    key,\n    name,\n    type,\n  };\n\n  const client = (() => {\n    if (resolvedTransport.config.type === \"http\") {\n      const { url, fetchOptions: fetchOptions_ } = resolvedTransport.value as {\n        fetchOptions: HttpTransportConfig[\"fetchOptions\"];\n        url: string;\n      };\n\n      const fetchOptions = fetchOptions_ ?? {};\n\n      if (url.toLowerCase().indexOf(\"alchemy\") > -1) {\n        fetchOptions.headers = {\n          ...fetchOptions.headers,\n          \"Alchemy-AA-Sdk-Version\": VERSION,\n        };\n      }\n\n      return createClient<Transport, Chain>({\n        ...baseParameters,\n        transport: http(url, {\n          ...resolvedTransport.config,\n          fetchOptions,\n        }),\n      });\n    }\n\n    return createClient<Transport, Chain>(baseParameters);\n  })();\n\n  return client.extend(publicActions).extend(bundlerActions);\n}\n"]}