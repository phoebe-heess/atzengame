{"version":3,"file":"account.js","sourceRoot":"","sources":["../../../src/errors/account.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AAEtC,MAAM,OAAO,oBAAqB,SAAQ,SAAS;IAIjD;QACE,KAAK,CAAC,wDAAwD,CAAC,CAAC;QAJzD;;;;mBAAO,sBAAsB;WAAC;IAKvC,CAAC;CACF;AAED,MAAM,OAAO,6BAA8B,SAAQ,SAAS;IAE1D,YAAY,WAAmB,EAAE,KAAY,EAAE,OAA0B;QACvE,KAAK,CACH;YACE,0BAA0B,WAAW,mBAAmB,KAAK,CAAC,IAAI,2BAA2B,OAAO,EAAE;YACtG,gFAAgF;SACjF,CAAC,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;QAPK;;;;mBAAO,+BAA+B;WAAC;IAQhD,CAAC;CACF;AAED,MAAM,OAAO,6BAA8B,SAAQ,SAAS;IAE1D;QACE,KAAK,CAAC,iCAAiC,CAAC,CAAC;QAFlC;;;;mBAAO,+BAA+B;WAAC;IAGhD,CAAC;CACF;AAED,MAAM,OAAO,yBAA0B,SAAQ,SAAS;IAEtD,YAAY,WAAmB;QAC7B,KAAK,CAAC,iCAAiC,WAAW,EAAE,CAAC,CAAC;QAF/C;;;;mBAAO,sBAAsB;WAAC;IAGvC,CAAC;CACF;AAED,MAAM,OAAO,gCAAiC,SAAQ,SAAS;IAE7D;QACE,KAAK,CAAC,qDAAqD,CAAC,CAAC;QAFtD;;;;mBAAO,6BAA6B;WAAC;IAG9C,CAAC;CACF;AAED,MAAM,OAAO,2BAA4B,SAAQ,SAAS;IAExD,YAAY,IAAY,EAAE,cAAsB;QAC9C,KAAK,CAAC,8BAA8B,IAAI,KAAK,cAAc,GAAG,CAAC,CAAC;QAFzD;;;;mBAAO,6BAA6B;WAAC;IAG9C,CAAC;CACF;AAED,MAAM,OAAO,+BAAgC,SAAQ,SAAS;IAE5D,YAAY,WAAmB;QAC7B,KAAK,CAAC,uCAAuC,WAAW,EAAE,CAAC,CAAC;QAFrD;;;;mBAAO,iCAAiC;WAAC;IAGlD,CAAC;CACF;AAED,MAAM,OAAO,yBAA0B,SAAQ,SAAS;IAEtD,YAAY,WAAmB;QAC7B,KAAK,CAAC,mBAAmB,WAAW,+BAA+B,CAAC,CAAC;QAF9D;;;;mBAAO,2BAA2B;WAAC;IAG5C,CAAC;CACF;AAED,MAAM,OAAO,iCAAkC,SAAQ,SAAS;IAE9D,YAAY,WAAmB;QAC7B,KAAK,CAAC,wCAAwC,WAAW,EAAE,CAAC,CAAC;QAFtD;;;;mBAAO,mCAAmC;WAAC;IAGpD,CAAC;CACF;AAED,MAAM,OAAO,oBAAqB,SAAQ,SAAS;IAEjD,YAAY,QAAgB,EAAE,MAAc;QAC1C,KAAK,CAAC,yBAAyB,QAAQ,SAAS,MAAM,EAAE,CAAC,CAAC;QAFnD;;;;mBAAO,2BAA2B;WAAC;IAG5C,CAAC;CACF;AAED,MAAM,OAAO,mCAAoC,SAAQ,SAAS;IAEhE;QACE,KAAK,CAAC,iCAAiC,CAAC,CAAC;QAFlC;;;;mBAAO,qCAAqC;WAAC;IAGtD,CAAC;CACF","sourcesContent":["import type { Chain } from \"viem\";\nimport type { EntryPointVersion } from \"../entrypoint/types.js\";\nimport { BaseError } from \"./base.js\";\n\nexport class AccountNotFoundError extends BaseError {\n  override name = \"AccountNotFoundError\";\n\n  // TODO: extend this further using docs path as well\n  constructor() {\n    super(\"Could not find an Account to execute with this Action.\");\n  }\n}\n\nexport class DefaultFactoryNotDefinedError extends BaseError {\n  override name = \"DefaultFactoryNotDefinedError\";\n  constructor(accountType: string, chain: Chain, version: EntryPointVersion) {\n    super(\n      [\n        `No default factory for ${accountType} found on chain ${chain.name} for entrypoint version ${version}`,\n        \"Supply an override via the `factoryAddress` parameter when creating an account\",\n      ].join(\"\\n\")\n    );\n  }\n}\n\nexport class GetCounterFactualAddressError extends BaseError {\n  override name = \"GetCounterFactualAddressError\";\n  constructor() {\n    super(\"getCounterFactualAddress failed\");\n  }\n}\n\nexport class UpgradesNotSupportedError extends BaseError {\n  override name = \"UpgradesNotSupported\";\n  constructor(accountType: string) {\n    super(`Upgrades are not supported by ${accountType}`);\n  }\n}\n\nexport class SignTransactionNotSupportedError extends BaseError {\n  override name = \"SignTransactionNotSupported\";\n  constructor() {\n    super(`SignTransaction is not supported by smart contracts`);\n  }\n}\n\nexport class FailedToGetStorageSlotError extends BaseError {\n  override name = \"FailedToGetStorageSlotError\";\n  constructor(slot: string, slotDescriptor: string) {\n    super(`Failed to get storage slot ${slot} (${slotDescriptor})`);\n  }\n}\n\nexport class BatchExecutionNotSupportedError extends BaseError {\n  override name = \"BatchExecutionNotSupportedError\";\n  constructor(accountType: string) {\n    super(`Batch execution is not supported by ${accountType}`);\n  }\n}\n\nexport class AccountRequiresOwnerError extends BaseError {\n  override name = \"AccountRequiresOwnerError\";\n  constructor(accountType: string) {\n    super(`Account of type ${accountType} requires an owner to execute`);\n  }\n}\n\nexport class UpgradeToAndCallNotSupportedError extends BaseError {\n  override name = \"UpgradeToAndCallNotSupportedError\";\n  constructor(accountType: string) {\n    super(`UpgradeToAndCall is not supported by ${accountType}`);\n  }\n}\n\nexport class IncorrectAccountType extends BaseError {\n  override name = \"IncorrectAccountTypeError\";\n  constructor(expected: string, actual: string) {\n    super(`Expected account type ${expected}, got ${actual}`);\n  }\n}\n\nexport class SmartAccountWithSignerRequiredError extends BaseError {\n  override name = \"SmartAccountWithSignerRequiredError\";\n  constructor() {\n    super(\"Smart account requires a signer\");\n  }\n}\n"]}