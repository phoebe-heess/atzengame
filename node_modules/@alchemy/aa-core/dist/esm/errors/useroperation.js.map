{"version":3,"file":"useroperation.js","sourceRoot":"","sources":["../../../src/errors/useroperation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AAStC,MAAM,OAAO,yBAA0B,SAAQ,SAAS;IAYtD,YAAY,EAAuB;QACjC,KAAK,CACH,yFAAyF,IAAI,CAAC,SAAS,CACrG,EAAE,EACF,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CACd,OAAO,KAAK,KAAK,QAAQ;YACvB,CAAC,CAAC;gBACE,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE;aACxB;YACH,CAAC,CAAC,KAAK,EACX,CAAC,CACF,EAAE,CACJ,CAAC;QArBK;;;;mBAAO,2BAA2B;WAAC;IAsB5C,CAAC;CACF;AAQD,MAAM,OAAO,yBAA0B,SAAQ,SAAS;IAKtD,YAAmB,OAA6B,EAAE,KAAY;QAC5D,KAAK,CAAC,kCAAkC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAD/C;;;;mBAAO,OAAO;WAAsB;IAEhD,CAAC;CACF","sourcesContent":["import type { UserOperationRequest, UserOperationStruct } from \"../types.js\";\nimport { BaseError } from \"./base.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { dropAndReplaceUserOperation } from \"../actions/smartAccount/dropAndReplaceUserOperation.js\";\n\n/**\n * Thrown when a {@link UserOperationStruct} is not a valid request\n *\n * extends viem BaseError\n */\nexport class InvalidUserOperationError extends BaseError {\n  /**\n   * @inheritdoc\n   */\n  override name = \"InvalidUserOperationError\";\n  /**\n   * Creates an instance of InvalidUserOperationError.\n   *\n   * InvalidUserOperationError constructor\n   *\n   * @param uo the invalid user operation struct\n   */\n  constructor(uo: UserOperationStruct) {\n    super(\n      `Request is missing parameters. All properties on UserOperationStruct must be set. uo: ${JSON.stringify(\n        uo,\n        (_key, value) =>\n          typeof value === \"bigint\"\n            ? {\n                type: \"bigint\",\n                value: value.toString(),\n              }\n            : value,\n        2\n      )}`\n    );\n  }\n}\n\n/**\n * Error thrown when waiting for user operation request to be mined.\n *\n * Includes the internal error as well as the request that failed. This request\n * can then be used with {@link dropAndReplaceUserOperation} to retry the operation.\n */\nexport class WaitForUserOperationError extends BaseError {\n  /**\n   * @param request the user operation request that failed\n   * @param error the underlying error that caused the failure\n   */\n  constructor(public request: UserOperationRequest, error: Error) {\n    super(`Failed to find User Operation: ${error.message}`);\n  }\n}\n"]}