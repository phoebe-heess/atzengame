{"version":3,"file":"userop.js","sourceRoot":"","sources":["../../../src/utils/userop.ts"],"names":[],"mappings":"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","sourcesContent":["import { concat, type Address, type Hex } from \"viem\";\nimport type { EntryPointVersion } from \"../entrypoint/types\";\nimport type {\n  BigNumberish,\n  Multiplier,\n  UserOperationFeeOptionsField,\n  UserOperationOverrides,\n  UserOperationRequest,\n  UserOperationStruct,\n  UserOperationStruct_v6,\n  UserOperationStruct_v7,\n} from \"../types\";\nimport { bigIntClamp, bigIntMultiply } from \"./bigint.js\";\nimport { allEqual, isBigNumberish } from \"./index.js\";\n\n/**\n * Utility method for asserting a {@link UserOperationStruct} has valid fields for the given entry point version\n *\n * @param request a {@link UserOperationStruct} to validate\n * @returns a type guard that asserts the {@link UserOperationRequest} is valid\n */\nexport function isValidRequest<\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n>(\n  request: UserOperationStruct<TEntryPointVersion>\n): request is UserOperationRequest<TEntryPointVersion> {\n  // These are the only ones marked as optional in the interface above\n  return (\n    BigInt(request.callGasLimit || 0n) > 0n &&\n    BigInt(request.maxFeePerGas || 0n) > 0n &&\n    BigInt(request.preVerificationGas || 0n) > 0n &&\n    BigInt(request.verificationGasLimit || 0n) > 0n &&\n    request.maxPriorityFeePerGas != null &&\n    isValidPaymasterAndData(request) &&\n    isValidFactoryAndData(request)\n  );\n}\n\n/**\n * Utility method for asserting a {@link UserOperationRequest} has valid fields for the paymaster data\n *\n * @param request a {@link UserOperationRequest} to validate\n * @returns a type guard that asserts the {@link UserOperationRequest} is a {@link UserOperationRequest}\n */\nexport function isValidPaymasterAndData<\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n>(request: UserOperationStruct<TEntryPointVersion>): boolean {\n  if (\"paymasterAndData\" in request) {\n    return (request as UserOperationStruct_v6).paymasterAndData != null;\n  }\n\n  // either all exist, or none.\n  return allEqual(\n    (request as UserOperationStruct_v7).paymaster == null,\n    (request as UserOperationStruct_v7).paymasterData == null,\n    (request as UserOperationStruct_v7).paymasterPostOpGasLimit == null,\n    (request as UserOperationStruct_v7).paymasterVerificationGasLimit == null\n  );\n}\n\n/**\n * Utility method for asserting a {@link UserOperationStruct} has valid fields for the paymaster data\n *\n * @param request a {@link UserOperationRequest} to validate\n * @returns a type guard that asserts the {@link UserOperationStruct} is a {@link UserOperationRequest}\n */\nexport function isValidFactoryAndData<\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n>(request: UserOperationStruct<TEntryPointVersion>): boolean {\n  if (\"initCode\" in request) {\n    const { initCode } = request as UserOperationStruct_v6;\n    return initCode != null;\n  }\n\n  // either all exist, or none.\n  return allEqual(\n    (request as UserOperationStruct_v7).factory == null,\n    (request as UserOperationStruct_v7).factoryData == null\n  );\n}\n\n/**\n * Utility method for applying a {@link UserOperationOverrides} field value\n * over the current value set for the field\n *\n * @param value the current value of the field\n * @param override the override value to apply\n * @returns the new value of the field after applying the override\n */\nexport function applyUserOpOverride<TValue extends BigNumberish | undefined>(\n  value: TValue,\n  override?: BigNumberish | Multiplier\n): TValue | BigNumberish {\n  if (override == null) {\n    return value;\n  }\n\n  if (isBigNumberish(override)) {\n    return override;\n  }\n\n  // multiplier override\n  else {\n    return value != null ? bigIntMultiply(value, override.multiplier) : value;\n  }\n}\n\n/**\n * Utility method for applying a {@link UserOperationFeeOptionsField} value\n * over the current value set for the field\n *\n * @param value the current value of the field\n * @param feeOption the fee option field value to apply\n * @returns the new value of the field after applying the fee option\n */\nexport function applyUserOpFeeOption<TValue extends BigNumberish | undefined>(\n  value: TValue,\n  feeOption?: UserOperationFeeOptionsField\n): TValue | BigNumberish {\n  if (feeOption == null) {\n    return value;\n  }\n\n  return value != null\n    ? bigIntClamp(\n        feeOption.multiplier\n          ? bigIntMultiply(value, feeOption.multiplier)\n          : value,\n        feeOption.min,\n        feeOption.max\n      )\n    : feeOption.min ?? 0n;\n}\n\n/**\n * Utility method for applying a {@link UserOperationOverrides} field value and\n * a {@link UserOperationFeeOptionsField} value over the current value set for the field,\n * with the override taking precedence over the fee option\n *\n * @param value the current value of the field\n * @param [override] the override value to apply\n * @param [feeOption] the fee option field value to apply\n * @returns the new value of the field after applying the override or fee option\n */\nexport function applyUserOpOverrideOrFeeOption<\n  TValue extends BigNumberish | undefined\n>(\n  value: TValue,\n  override?: BigNumberish | Multiplier,\n  feeOption?: UserOperationFeeOptionsField\n): TValue | BigNumberish {\n  return value != null && override != null\n    ? applyUserOpOverride(value, override)!\n    : applyUserOpFeeOption(value, feeOption);\n}\n\n/**\n * Utility method for checking whether the middleware pipeline should\n * bypass the paymaster middleware for the user operation with the given overrides,\n * either because the UserOp is paying for its own gas, or passing a specific paymaster\n *\n * @template EntryPointVersion TEntryPointVersion\n * @param overrides the user operation overrides to check\n * @returns whether the paymaster middleware should be bypassed\n */\nexport const bypassPaymasterAndData = <\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n>(\n  overrides: UserOperationOverrides<TEntryPointVersion> | undefined\n): boolean =>\n  !!overrides &&\n  (\"paymasterAndData\" in overrides || \"paymasterData\" in overrides);\n\n/**\n * An alternative to `bypassPaymasterAndData` which only returns true if the data parameter\n * is \"0x,\" this is useful for cases when middleware should be bypassed ONLY IF the UserOp will\n * pay for its own gas\n *\n * @template EntryPointVersion TEntryPointVersion\n * @param overrides the user operation overrides to check\n * @returns whether the paymaster middleware should be bypassed\n */\nexport const bypassPaymasterAndDataEmptyHex = <\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n>(\n  overrides: UserOperationOverrides<TEntryPointVersion> | undefined\n): boolean =>\n  overrides !== undefined &&\n  ((\"paymasterAndData\" in overrides && overrides.paymasterAndData === \"0x\") ||\n    (\"paymasterData\" in overrides && overrides.paymasterData === \"0x\"));\n\n/**\n * Utility method for parsing the paymaster address and paymasterData from the paymasterAndData hex string\n *\n * @param paymasterAndData the paymaster and data hex string to parse.\n *                         The hex string refers to the paymasterAndData field of entrypoint v0.6 user operation request\n * @returns the parsed paymaster and paymasterData fields of entrypoint v0.7 user operation request paymaster and paymasterData field\n */\nexport const parsePaymasterAndData = (\n  paymasterAndData: Hex\n): Pick<UserOperationRequest<\"0.7.0\">, \"paymaster\" | \"paymasterData\"> => ({\n  paymaster: paymasterAndData.substring(0, 42) as Address,\n  paymasterData: `0x${paymasterAndData.substring(42)}` as Hex,\n});\n\n/**\n * Utility method for converting the object containing the paymaster address and paymaster data\n * to the paymaster and data concatenated hex string\n *\n * @param paymasterAndData the object containing the picked paymaster and paymasterData fields of\n *                         entrypoint v0.7 user operation request\n * @param paymasterAndData.paymaster the paymaster address\n * @param paymasterAndData.paymasterData the paymaster data\n * @returns the paymasterAndData hex value of entrypoint v0.6 user operation request paymasterAndData field\n */\nexport const concatPaymasterAndData = ({\n  paymaster = \"0x\",\n  paymasterData = \"0x\",\n}: Pick<UserOperationRequest<\"0.7.0\">, \"paymaster\" | \"paymasterData\">): Hex =>\n  concat([paymaster, paymasterData]);\n"]}