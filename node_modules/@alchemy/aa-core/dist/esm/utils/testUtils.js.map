{"version":3,"file":"testUtils.js","sourceRoot":"","sources":["../../../src/utils/testUtils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,EAAwB,MAAM,MAAM,CAAC;AACxE,OAAO,EACL,sBAAsB,GAEvB,MAAM,oCAAoC,CAAC;AAC5C,OAAO,EACL,+BAA+B,GAEhC,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AAGvD,MAAM,CAAC,MAAM,+BAA+B,GAAG,KAAK,EAClD,MAAS,EACyD,EAAE;IACpE,OAAO,sBAAsB,CAAC;QAC5B,MAAM,EAAE,OAAO;QACf,cAAc,EAAE,4CAA4C;QAC5D,UAAU,EAAE,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC;QACvC,KAAK,EAAE,MAAM,CAAC,KAAK;QACnB,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC;QACzB,WAAW,EAAE,KAAK,IAAI,EAAE,CAAC,YAAY;QACrC,aAAa,EAAE,KAAK,IAAI,EAAE,CAAC,YAAY;QACvC,kBAAkB,EAAE,KAAK,IAAI,EAAE,CAC7B,oDAAoD;QACtD,kBAAkB,EAAE,KAAK,IAAI,EAAE,CAAC,IAAI;QACpC,aAAa,EAAE,KAAK,IAAI,EAAE,CAAC,IAAI;QAC/B,iBAAiB,EAAE,GAAQ,EAAE,CAC3B,sIAAsI;KACzI,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAAY,EAAE,EAAE;IAC/C,OAAO,+BAA+B,CACpC,kBAAkB,CAAC;QACjB,KAAK;QACL,SAAS,EAAE,MAAM,CAAC;YAChB,OAAO,EAAE,KAAK,IAAI,EAAE,GAAE,CAAC;SACxB,CAAC;KACH,CAAC,CACH,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { createPublicClient, custom, type Chain, type Hex } from \"viem\";\nimport {\n  toSmartContractAccount,\n  type SmartContractAccount,\n} from \"../account/smartContractAccount.js\";\nimport {\n  createBundlerClientFromExisting,\n  type BundlerClient,\n} from \"../client/bundlerClient.js\";\nimport { getEntryPoint } from \"../entrypoint/index.js\";\nimport type { DefaultEntryPointVersion } from \"../entrypoint/types.js\";\n\nexport const createDummySmartContractAccount = async <C extends BundlerClient>(\n  client: C\n): Promise<SmartContractAccount<\"dummy\", DefaultEntryPointVersion>> => {\n  return toSmartContractAccount({\n    source: \"dummy\",\n    accountAddress: \"0x1234567890123456789012345678901234567890\",\n    entryPoint: getEntryPoint(client.chain),\n    chain: client.chain,\n    transport: custom(client),\n    signMessage: async () => \"0xdeadbeef\",\n    signTypedData: async () => \"0xdeadbeef\",\n    getAccountInitCode: async () =>\n      \"0x1234567890123456789012345678901234567890deadbeef\",\n    encodeBatchExecute: async () => \"0x\",\n    encodeExecute: async () => \"0x\",\n    getDummySignature: (): Hex =>\n      \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\",\n  });\n};\n\nexport const createTestClient = (chain: Chain) => {\n  return createBundlerClientFromExisting(\n    createPublicClient({\n      chain,\n      transport: custom({\n        request: async () => {},\n      }),\n    })\n  );\n};\n"]}