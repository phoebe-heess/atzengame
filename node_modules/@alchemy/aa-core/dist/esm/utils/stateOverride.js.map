{"version":3,"file":"stateOverride.js","sourceRoot":"","sources":["../../../src/utils/stateOverride.ts"],"names":[],"mappings":"AACA,OAAO,EACL,yBAAyB,EACzB,mBAAmB,EACnB,4BAA4B,EAC5B,SAAS,EACT,WAAW,GAMZ,MAAM,MAAM,CAAC;AAOd,SAAS,qBAAqB,CAC5B,YAA6C;IAE7C,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,SAAS,CAAC;IACjE,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE;QAClD,wBAAwB,CAAC,IAAI,CAAC,CAAC;QAC/B,wBAAwB,CAAC,KAAK,CAAC,CAAC;QAChC,GAAG,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;QAClB,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAqB,CAAC,CAAC;AAC5B,CAAC;AAED,SAAS,wBAAwB,CAAC,KAAc;IAC9C,IAAI,KAAK,CAAC,MAAM,KAAK,EAAE,EAAE,CAAC;QAExB,MAAM,IAAI,KAAK,CACb,6CAA6C,KAAK,CAAC,MAAM,YAAY,CACtE,CAAC;IACJ,CAAC;AACH,CAAC;AAOD,SAAS,6BAA6B,CACpC,UAAmD;IAEnD,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC;IAC9D,MAAM,uBAAuB,GAA4B,EAAE,CAAC;IAC5D,IAAI,IAAI,KAAK,SAAS;QAAE,uBAAuB,CAAC,IAAI,GAAG,IAAI,CAAC;IAC5D,IAAI,OAAO,KAAK,SAAS;QACvB,uBAAuB,CAAC,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;IACzD,IAAI,KAAK,KAAK,SAAS;QAAE,uBAAuB,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IAC5E,IAAI,KAAK,KAAK,SAAS;QACrB,uBAAuB,CAAC,KAAK,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;IAC/D,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;QAC5B,IAAI,uBAAuB,CAAC,KAAK;YAAE,MAAM,IAAI,4BAA4B,EAAE,CAAC;QAC5E,uBAAuB,CAAC,SAAS,GAAG,qBAAqB,CAAC,SAAS,CAAC,CAAC;IACvE,CAAC;IACD,OAAO,uBAAuB,CAAC;AACjC,CAAC;AAKD,MAAM,UAAU,sBAAsB,CACpC,UAA6C;IAE7C,IAAI,CAAC,UAAU;QAAE,OAAO,SAAS,CAAC;IAClC,MAAM,gBAAgB,GAAqB,EAAE,CAAC;IAC9C,KAAK,MAAM,EAAE,OAAO,EAAE,GAAG,YAAY,EAAE,IAAI,UAAU,EAAE,CAAC;QACtD,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;YACxC,MAAM,IAAI,mBAAmB,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAC7C,IAAI,gBAAgB,CAAC,OAAO,CAAC;YAC3B,MAAM,IAAI,yBAAyB,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QAC5D,gBAAgB,CAAC,OAAO,CAAC,GAAG,6BAA6B,CAAC,YAAY,CAAC,CAAC;IAC1E,CAAC;IACD,OAAO,gBAAgB,CAAC;AAC1B,CAAC","sourcesContent":["import type { Address } from \"abitype\";\nimport {\n  AccountStateConflictError,\n  InvalidAddressError,\n  StateAssignmentConflictError,\n  isAddress,\n  numberToHex,\n  type RpcAccountStateOverride,\n  type RpcStateMapping,\n  type RpcStateOverride,\n  type StateMapping,\n  type StateOverride,\n} from \"viem\";\n\n// Copied from Viem's utils/stateOverride.ts, which does not expose these\n// functions.\n\ntype SerializeStateMappingParameters = StateMapping | undefined;\n\nfunction serializeStateMapping(\n  stateMapping: SerializeStateMappingParameters\n): RpcStateMapping | undefined {\n  if (!stateMapping || stateMapping.length === 0) return undefined;\n  return stateMapping.reduce((acc, { slot, value }) => {\n    validateBytes32HexLength(slot);\n    validateBytes32HexLength(value);\n    acc[slot] = value;\n    return acc;\n  }, {} as RpcStateMapping);\n}\n\nfunction validateBytes32HexLength(value: Address): void {\n  if (value.length !== 66) {\n    // This is the error message from Viem's non-exported InvalidBytesLengthError.\n    throw new Error(\n      `Hex is expected to be 66 hex long, but is ${value.length} hex long.`\n    );\n  }\n}\n\ntype SerializeAccountStateOverrideParameters = Omit<\n  StateOverride[number],\n  \"address\"\n>;\n\nfunction serializeAccountStateOverride(\n  parameters: SerializeAccountStateOverrideParameters\n): RpcAccountStateOverride {\n  const { balance, nonce, state, stateDiff, code } = parameters;\n  const rpcAccountStateOverride: RpcAccountStateOverride = {};\n  if (code !== undefined) rpcAccountStateOverride.code = code;\n  if (balance !== undefined)\n    rpcAccountStateOverride.balance = numberToHex(balance);\n  if (nonce !== undefined) rpcAccountStateOverride.nonce = numberToHex(nonce);\n  if (state !== undefined)\n    rpcAccountStateOverride.state = serializeStateMapping(state);\n  if (stateDiff !== undefined) {\n    if (rpcAccountStateOverride.state) throw new StateAssignmentConflictError();\n    rpcAccountStateOverride.stateDiff = serializeStateMapping(stateDiff);\n  }\n  return rpcAccountStateOverride;\n}\n\ntype SerializeStateOverrideParameters = StateOverride | undefined;\n\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function serializeStateOverride(\n  parameters?: SerializeStateOverrideParameters\n): RpcStateOverride | undefined {\n  if (!parameters) return undefined;\n  const rpcStateOverride: RpcStateOverride = {};\n  for (const { address, ...accountState } of parameters) {\n    if (!isAddress(address, { strict: false }))\n      throw new InvalidAddressError({ address });\n    if (rpcStateOverride[address])\n      throw new AccountStateConflictError({ address: address });\n    rpcStateOverride[address] = serializeAccountStateOverride(accountState);\n  }\n  return rpcStateOverride;\n}\n"]}