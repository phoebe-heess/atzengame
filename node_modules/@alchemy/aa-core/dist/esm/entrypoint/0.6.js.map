{"version":3,"file":"0.6.js","sourceRoot":"","sources":["../../../src/entrypoint/0.6.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,mBAAmB,EACnB,WAAW,EACX,SAAS,GAKV,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,gBAAgB,EAAE,MAAM,6BAA6B,CAAC;AAI/D,MAAM,iBAAiB,GAAG,CAAC,OAAsC,EAAO,EAAE;IACxE,MAAM,cAAc,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACnD,MAAM,cAAc,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACnD,MAAM,sBAAsB,GAAG,SAAS,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAEnE,OAAO,mBAAmB,CACxB;QACE,EAAE,IAAI,EAAE,SAAS,EAAE;QACnB,EAAE,IAAI,EAAE,SAAS,EAAE;QACnB,EAAE,IAAI,EAAE,SAAS,EAAE;QACnB,EAAE,IAAI,EAAE,SAAS,EAAE;QACnB,EAAE,IAAI,EAAE,SAAS,EAAE;QACnB,EAAE,IAAI,EAAE,SAAS,EAAE;QACnB,EAAE,IAAI,EAAE,SAAS,EAAE;QACnB,EAAE,IAAI,EAAE,SAAS,EAAE;QACnB,EAAE,IAAI,EAAE,SAAS,EAAE;QACnB,EAAE,IAAI,EAAE,SAAS,EAAE;KACpB,EACD;QACE,OAAO,CAAC,MAAiB;QACzB,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC;QAC1B,cAAc;QACd,cAAc;QACd,WAAW,CAAC,OAAO,CAAC,YAAY,CAAC;QACjC,WAAW,CAAC,OAAO,CAAC,oBAAoB,CAAC;QACzC,WAAW,CAAC,OAAO,CAAC,kBAAkB,CAAC;QACvC,WAAW,CAAC,OAAO,CAAC,YAAY,CAAC;QACjC,WAAW,CAAC,OAAO,CAAC,oBAAoB,CAAC;QACzC,sBAAsB;KACvB,CACF,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe;IACb,OAAO,EAAE,OAAO;IAEhB,OAAO,EAAE;QACP,OAAO,EAAE,4CAA4C;KACtD;IAED,GAAG,EAAE,gBAAgB;IAErB,oBAAoB,EAAE,CACpB,OAAsC,EACtC,iBAA0B,EAC1B,OAAe,EACT,EAAE;QACR,MAAM,OAAO,GAAG,mBAAmB,CACjC,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,EAC/D;YACE,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YACrC,iBAAiB;YACjB,MAAM,CAAC,OAAO,CAAC;SAChB,CACF,CAAC;QAEF,OAAO,SAAS,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED,iBAAiB;CACqD,CAAC","sourcesContent":["import {\n  encodeAbiParameters,\n  hexToBigInt,\n  keccak256,\n  type Address,\n  type Chain,\n  type Hash,\n  type Hex,\n} from \"viem\";\nimport { EntryPointAbi_v6 } from \"../abis/EntryPointAbi_v6.js\";\nimport type { UserOperationRequest } from \"../types.js\";\nimport type { SupportedEntryPoint } from \"./types.js\";\n\nconst packUserOperation = (request: UserOperationRequest<\"0.6.0\">): Hex => {\n  const hashedInitCode = keccak256(request.initCode);\n  const hashedCallData = keccak256(request.callData);\n  const hashedPaymasterAndData = keccak256(request.paymasterAndData);\n\n  return encodeAbiParameters(\n    [\n      { type: \"address\" },\n      { type: \"uint256\" },\n      { type: \"bytes32\" },\n      { type: \"bytes32\" },\n      { type: \"uint256\" },\n      { type: \"uint256\" },\n      { type: \"uint256\" },\n      { type: \"uint256\" },\n      { type: \"uint256\" },\n      { type: \"bytes32\" },\n    ],\n    [\n      request.sender as Address,\n      hexToBigInt(request.nonce),\n      hashedInitCode,\n      hashedCallData,\n      hexToBigInt(request.callGasLimit),\n      hexToBigInt(request.verificationGasLimit),\n      hexToBigInt(request.preVerificationGas),\n      hexToBigInt(request.maxFeePerGas),\n      hexToBigInt(request.maxPriorityFeePerGas),\n      hashedPaymasterAndData,\n    ]\n  );\n};\n\nexport default {\n  version: \"0.6.0\",\n\n  address: {\n    default: \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n  },\n\n  abi: EntryPointAbi_v6,\n\n  getUserOperationHash: (\n    request: UserOperationRequest<\"0.6.0\">,\n    entryPointAddress: Address,\n    chainId: number\n  ): Hash => {\n    const encoded = encodeAbiParameters(\n      [{ type: \"bytes32\" }, { type: \"address\" }, { type: \"uint256\" }],\n      [\n        keccak256(packUserOperation(request)),\n        entryPointAddress,\n        BigInt(chainId),\n      ]\n    );\n\n    return keccak256(encoded);\n  },\n\n  packUserOperation,\n} satisfies SupportedEntryPoint<\"0.6.0\", Chain, typeof EntryPointAbi_v6>;\n"]}