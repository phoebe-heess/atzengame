{"version":3,"file":"signTypedDataWith6492.js","sourceRoot":"","sources":["../../../../src/actions/smartAccount/signTypedDataWith6492.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAG/D,MAAM,CAAC,MAAM,qBAAqB,GAWd,KAAK,EAAE,MAAM,EAAE,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE,EAAE;IAC5E,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,oBAAoB,EAAE,CAAC;IACnC,CAAC;IAED,OAAO,OAAO,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;AAClD,CAAC,CAAC","sourcesContent":["import type { Chain, Client, Hex, Transport, TypedData } from \"viem\";\nimport type { SmartContractAccount } from \"../../account/smartContractAccount\";\nimport { AccountNotFoundError } from \"../../errors/account.js\";\nimport type { SignTypedDataParameters } from \"./signTypedData\";\n\nexport const signTypedDataWith6492: <\n  const TTypedData extends TypedData | { [key: string]: unknown },\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TPrimaryType extends string = string\n>(\n  client: Client<TTransport, TChain, TAccount>,\n  args: SignTypedDataParameters<TTypedData, TPrimaryType, TAccount>\n) => Promise<Hex> = async (client, { account = client.account, typedData }) => {\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n\n  return account.signTypedDataWith6492(typedData);\n};\n"]}