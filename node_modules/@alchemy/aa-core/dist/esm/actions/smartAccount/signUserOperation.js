import { isBaseSmartAccountClient } from "../../client/isSmartAccountClient.js";
import { AccountNotFoundError } from "../../errors/account.js";
import { ChainNotFoundError, IncompatibleClientError, } from "../../errors/client.js";
import { deepHexlify, resolveProperties } from "../../utils/index.js";
export async function signUserOperation(client, args) {
    const { account = client.account, context } = args;
    if (!account) {
        throw new AccountNotFoundError();
    }
    if (!isBaseSmartAccountClient(client)) {
        throw new IncompatibleClientError("BaseSmartAccountClient", "signUserOperation", client);
    }
    if (!client.chain) {
        throw new ChainNotFoundError();
    }
    return await client.middleware
        .signUserOperation(args.uoStruct, {
        ...args,
        account,
        client,
        context,
    })
        .then(resolveProperties)
        .then(deepHexlify);
}
//# sourceMappingURL=signUserOperation.js.map