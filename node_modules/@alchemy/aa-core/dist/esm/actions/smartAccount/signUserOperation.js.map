{"version":3,"file":"signUserOperation.js","sourceRoot":"","sources":["../../../../src/actions/smartAccount/signUserOperation.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,wBAAwB,EAAE,MAAM,sCAAsC,CAAC;AAChF,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAC/D,OAAO,EACL,kBAAkB,EAClB,uBAAuB,GACxB,MAAM,wBAAwB,CAAC;AAEhC,OAAO,EAAE,WAAW,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAGtE,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAQrC,MAA4C,EAC5C,IAA2C;IAE3C,MAAM,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;IAEnD,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,oBAAoB,EAAE,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,EAAE,CAAC;QACtC,MAAM,IAAI,uBAAuB,CAC/B,wBAAwB,EACxB,mBAAmB,EACnB,MAAM,CACP,CAAC;IACJ,CAAC;IAED,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAClB,MAAM,IAAI,kBAAkB,EAAE,CAAC;IACjC,CAAC;IAED,OAAO,MAAM,MAAM,CAAC,UAAU;SAC3B,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE;QAChC,GAAG,IAAI;QACP,OAAO;QACP,MAAM;QACN,OAAO;KACR,CAAC;SACD,IAAI,CAAC,iBAAiB,CAAC;SACvB,IAAI,CAAC,WAAW,CAAC,CAAC;AACvB,CAAC","sourcesContent":["import type { Chain, Client, Transport } from \"viem\";\nimport type {\n  GetEntryPointFromAccount,\n  SmartContractAccount,\n} from \"../../account/smartContractAccount\";\nimport { isBaseSmartAccountClient } from \"../../client/isSmartAccountClient.js\";\nimport { AccountNotFoundError } from \"../../errors/account.js\";\nimport {\n  ChainNotFoundError,\n  IncompatibleClientError,\n} from \"../../errors/client.js\";\nimport type { UserOperationRequest } from \"../../types\";\nimport { deepHexlify, resolveProperties } from \"../../utils/index.js\";\nimport type { SignUserOperationParameters } from \"./types\";\n\nexport async function signUserOperation<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>\n>(\n  client: Client<TTransport, TChain, TAccount>,\n  args: SignUserOperationParameters<TAccount>\n): Promise<UserOperationRequest<TEntryPointVersion>> {\n  const { account = client.account, context } = args;\n\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n\n  if (!isBaseSmartAccountClient(client)) {\n    throw new IncompatibleClientError(\n      \"BaseSmartAccountClient\",\n      \"signUserOperation\",\n      client\n    );\n  }\n\n  if (!client.chain) {\n    throw new ChainNotFoundError();\n  }\n\n  return await client.middleware\n    .signUserOperation(args.uoStruct, {\n      ...args,\n      account,\n      client,\n      context,\n    })\n    .then(resolveProperties)\n    .then(deepHexlify);\n}\n"]}