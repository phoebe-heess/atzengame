import { isBaseSmartAccountClient } from "../../client/isSmartAccountClient.js";
import { AccountNotFoundError } from "../../errors/account.js";
import { IncompatibleClientError } from "../../errors/client.js";
import { WaitForUserOperationError } from "../../errors/useroperation.js";
import { buildUserOperationFromTxs } from "./buildUserOperationFromTxs.js";
import { _sendUserOperation } from "./internal/sendUserOperation.js";
import { waitForUserOperationTransaction } from "./waitForUserOperationTransacation.js";
export async function sendTransactions(client, args) {
    const { requests, overrides, account = client.account, context } = args;
    if (!account) {
        throw new AccountNotFoundError();
    }
    if (!isBaseSmartAccountClient(client)) {
        throw new IncompatibleClientError("BaseSmartAccountClient", "sendTransactions", client);
    }
    const { uoStruct } = await buildUserOperationFromTxs(client, {
        requests,
        overrides,
        account,
        context,
    });
    const { hash, request } = await _sendUserOperation(client, {
        account,
        uoStruct,
        context,
        overrides,
    });
    return waitForUserOperationTransaction(client, { hash }).catch((e) => {
        throw new WaitForUserOperationError(request, e);
    });
}
//# sourceMappingURL=sendTransactions.js.map