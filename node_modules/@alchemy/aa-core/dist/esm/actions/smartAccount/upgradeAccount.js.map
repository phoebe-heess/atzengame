{"version":3,"file":"upgradeAccount.js","sourceRoot":"","sources":["../../../../src/actions/smartAccount/upgradeAccount.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,wBAAwB,EAAE,MAAM,sCAAsC,CAAC;AAChF,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAC/D,OAAO,EAAE,uBAAuB,EAAE,MAAM,wBAAwB,CAAC;AACjE,OAAO,EAAE,iBAAiB,EAAE,MAAM,wBAAwB,CAAC;AAE3D,OAAO,EAAE,+BAA+B,EAAE,MAAM,uCAAuC,CAAC;AAExF,MAAM,CAAC,MAAM,cAAc,GAYN,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;IAC1C,MAAM,EACJ,OAAO,GAAG,MAAM,CAAC,OAAO,EACxB,SAAS,EACT,SAAS,EACT,SAAS,EACT,OAAO,GACR,GAAG,IAAI,CAAC;IAET,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,oBAAoB,EAAE,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,EAAE,CAAC;QACtC,MAAM,IAAI,uBAAuB,CAC/B,wBAAwB,EACxB,gBAAgB,EAChB,MAAM,CACP,CAAC;IACJ,CAAC;IAED,MAAM,EAAE,WAAW,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,SAAS,CAAC;IAE1E,MAAM,iBAAiB,GAAG,MAAM,OAAO,CAAC,sBAAsB,CAAC;QAC7D,gBAAgB,EAAE,kBAAkB;QACpC,iBAAiB,EAAE,kBAAkB;KACtC,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,MAAM,EAAE;QAC7C,EAAE,EAAE;YACF,MAAM,EAAE,OAAO,CAAC,OAAO;YACvB,IAAI,EAAE,iBAAiB;SACxB;QACD,OAAO;QACP,SAAS;QACT,OAAO;KACR,CAAC,CAAC;IAEH,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IACvB,IAAI,SAAS,EAAE,CAAC;QACd,IAAI,GAAG,MAAM,+BAA+B,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC/D,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC","sourcesContent":["import type { Chain, Client, Hash, Transport } from \"viem\";\nimport type { SmartContractAccount } from \"../../account/smartContractAccount.js\";\nimport { isBaseSmartAccountClient } from \"../../client/isSmartAccountClient.js\";\nimport { AccountNotFoundError } from \"../../errors/account.js\";\nimport { IncompatibleClientError } from \"../../errors/client.js\";\nimport { sendUserOperation } from \"./sendUserOperation.js\";\nimport type { UpgradeAccountParams, UserOperationContext } from \"./types.js\";\nimport { waitForUserOperationTransaction } from \"./waitForUserOperationTransacation.js\";\n\nexport const upgradeAccount: <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>,\n  args: UpgradeAccountParams<TAccount, TContext>\n) => Promise<Hash> = async (client, args) => {\n  const {\n    account = client.account,\n    upgradeTo,\n    overrides,\n    waitForTx,\n    context,\n  } = args;\n\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n\n  if (!isBaseSmartAccountClient(client)) {\n    throw new IncompatibleClientError(\n      \"BaseSmartAccountClient\",\n      \"upgradeAccount\",\n      client\n    );\n  }\n\n  const { implAddress: accountImplAddress, initializationData } = upgradeTo;\n\n  const encodeUpgradeData = await account.encodeUpgradeToAndCall({\n    upgradeToAddress: accountImplAddress,\n    upgradeToInitData: initializationData,\n  });\n\n  const result = await sendUserOperation(client, {\n    uo: {\n      target: account.address,\n      data: encodeUpgradeData,\n    },\n    account,\n    overrides,\n    context,\n  });\n\n  let hash = result.hash;\n  if (waitForTx) {\n    hash = await waitForUserOperationTransaction(client, result);\n  }\n\n  return hash;\n};\n"]}