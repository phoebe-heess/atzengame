import type { Address } from "abitype";
import type { Hex, SignableMessage, TypedData, TypedDataDefinition } from "viem";
export interface SmartAccountAuthenticator<AuthParams, AuthDetails, Inner = any> extends SmartAccountSigner<Inner> {
    authenticate: (params: AuthParams) => Promise<AuthDetails>;
    getAuthDetails: () => Promise<AuthDetails>;
}
export interface SmartAccountSigner<Inner = any> {
    signerType: string;
    inner: Inner;
    getAddress: () => Promise<Address>;
    signMessage: (message: SignableMessage) => Promise<Hex>;
    signTypedData: <const TTypedData extends TypedData | {
        [key: string]: unknown;
    }, TPrimaryType extends string = string>(params: TypedDataDefinition<TTypedData, TPrimaryType>) => Promise<Hex>;
}
