{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"AAAA,OAAO,EAMN,MAAM,MAAM,CAAC","sourcesContent":["import {\n  type Address,\n  type Hash,\n  type Hex,\n  type StateOverride,\n  type TransactionReceipt,\n} from \"viem\";\nimport type { z } from \"zod\";\nimport type {\n  UserOperationFeeOptionsFieldSchema,\n  UserOperationFeeOptionsSchema,\n  UserOperationFeeOptionsSchema_v6,\n  UserOperationFeeOptionsSchema_v7,\n} from \"./client/schema\";\nimport type { EntryPointVersion } from \"./entrypoint/types\";\nimport type {\n  BigNumberishRangeSchema,\n  BigNumberishSchema,\n  MultiplierSchema,\n  NoUndefined,\n} from \"./utils\";\n\nexport type EmptyHex = `0x`;\nexport type NullAddress = `0x0`;\n\n// based on @account-abstraction/common\nexport type PromiseOrValue<T> = T | Promise<T>;\nexport type BytesLike = Uint8Array | Hex;\nexport type Multiplier = z.input<typeof MultiplierSchema>;\n\nexport type BigNumberish = z.input<typeof BigNumberishSchema>;\nexport type BigNumberishRange = z.input<typeof BigNumberishRangeSchema>;\n\n// [!region UserOperationCallData]\nexport type UserOperationCallData =\n  | {\n      /* the target of the call */\n      target: Address;\n      /* the data passed to the target */\n      data: Hex;\n      /* the amount of native token to send to the target (default: 0) */\n      value?: bigint;\n    }\n  | Hex;\n// [!endregion UserOperationCallData]\n\n// [!region BatchUserOperationCallData]\nexport type BatchUserOperationCallData = Exclude<UserOperationCallData, Hex>[];\n// [!endregion BatchUserOperationCallData]\n\nexport type UserOperationFeeOptionsField = z.input<\n  typeof UserOperationFeeOptionsFieldSchema\n>;\n\nexport type UserOperationFeeOptions<\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n> = TEntryPointVersion extends \"0.6.0\"\n  ? z.input<typeof UserOperationFeeOptionsSchema_v6>\n  : TEntryPointVersion extends \"0.7.0\"\n  ? z.input<typeof UserOperationFeeOptionsSchema_v7>\n  : z.input<typeof UserOperationFeeOptionsSchema>;\n\nexport type UserOperationOverridesParameter<\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion,\n  Required extends boolean = false\n> = Required extends true\n  ? { overrides: UserOperationOverrides<TEntryPointVersion> }\n  : { overrides?: UserOperationOverrides<TEntryPointVersion> };\n\n// [!region UserOperationPaymasterOverrides]\nexport type UserOperationPaymasterOverrides<\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n> = TEntryPointVersion extends \"0.6.0\"\n  ? {\n      // paymasterData overrides to bypass paymaster middleware\n      paymasterAndData: Hex;\n    }\n  : TEntryPointVersion extends \"0.7.0\"\n  ? {\n      // paymasterData overrides to bypass paymaster middleware\n      // if set to '0x', all paymaster related fields are omitted from the user op request\n      paymasterData: Hex;\n      paymaster: Address;\n      paymasterVerificationGasLimit:\n        | NoUndefined<\n            UserOperationStruct<\"0.7.0\">[\"paymasterVerificationGasLimit\"]\n          >\n        | Multiplier;\n      paymasterPostOpGasLimit:\n        | NoUndefined<UserOperationStruct<\"0.7.0\">[\"paymasterPostOpGasLimit\"]>\n        | Multiplier;\n    }\n  : {};\n// [!endregion UserOperationOverridesParameter]\n\n// [!region UserOperationOverrides]\nexport type UserOperationOverrides<\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n> = Partial<\n  {\n    callGasLimit:\n      | UserOperationStruct<TEntryPointVersion>[\"callGasLimit\"]\n      | Multiplier;\n    maxFeePerGas:\n      | UserOperationStruct<TEntryPointVersion>[\"maxFeePerGas\"]\n      | Multiplier;\n    maxPriorityFeePerGas:\n      | UserOperationStruct<TEntryPointVersion>[\"maxPriorityFeePerGas\"]\n      | Multiplier;\n    preVerificationGas:\n      | UserOperationStruct<TEntryPointVersion>[\"preVerificationGas\"]\n      | Multiplier;\n    verificationGasLimit:\n      | UserOperationStruct<TEntryPointVersion>[\"verificationGasLimit\"]\n      | Multiplier;\n    /**\n     * This can be used to override the key used when calling `entryPoint.getNonce`\n     * It is useful when you want to use parallel nonces for user operations\n     *\n     * NOTE: not all bundlers fully support this feature and it could be that your bundler will still only include\n     * one user operation for your account in a bundle\n     */\n    nonceKey: bigint;\n\n    /**\n     * The same state overrides for\n     * [`eth_call`](https://geth.ethereum.org/docs/interacting-with-geth/rpc/ns-eth#eth-call) method.\n     * An address-to-state mapping, where each entry specifies some state to be ephemerally overridden\n     * prior to executing the call. State overrides allow you to customize the network state for\n     * the purpose of the simulation, so this feature is useful when you need to estimate gas\n     * for user operation scenarios under conditions that arenâ€™t currently present on the live network.\n     */\n    stateOverride: StateOverride;\n  } & UserOperationPaymasterOverrides<TEntryPointVersion>\n>;\n// [!endregion UserOperationOverrides]\n\n// [!region UserOperationRequest_v6]\n// represents the request as it needs to be formatted for v0.6 RPC requests\n// Reference: https://github.com/ethereum/ERCs/blob/8dd085d159cb123f545c272c0d871a5339550e79/ERCS/erc-4337.md#definitions\nexport interface UserOperationRequest_v6 {\n  /* the origin of the request */\n  sender: Address;\n  /* nonce (as hex) of the transaction, returned from the entry point for this Address */\n  nonce: Hex;\n  /* the initCode for creating the sender if it does not exist yet, otherwise \"0x\" */\n  initCode: Hex | EmptyHex;\n  /* the callData passed to the target */\n  callData: Hex;\n  /* Gas value (as hex) used by inner account execution */\n  callGasLimit: Hex;\n  /* Actual gas (as hex) used by the validation of this UserOperation */\n  verificationGasLimit: Hex;\n  /* Gas overhead (as hex) of this UserOperation */\n  preVerificationGas: Hex;\n  /* Maximum fee per gas (similar to EIP-1559 max_fee_per_gas) (as hex)*/\n  maxFeePerGas: Hex;\n  /* Maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas) (as hex)*/\n  maxPriorityFeePerGas: Hex;\n  /* Address of paymaster sponsoring the transaction, followed by extra data to send to the paymaster (\"0x\" for self-sponsored transaction) */\n  paymasterAndData: Hex | EmptyHex;\n  /* Data passed into the account along with the nonce during the verification step */\n  signature: Hex;\n}\n// [!endregion UserOperationRequest_v6]\n\n// [!region UserOperationRequest_v7]\n// represents the request as it needs to be formatted for v0.7 RPC requests\n// Reference: https://eips.ethereum.org/EIPS/eip-4337#definitions\nexport interface UserOperationRequest_v7 {\n  /* the account making the operation */\n  sender: Address;\n  /* anti-replay parameter. nonce of the transaction, returned from the entry point for this address */\n  nonce: Hex;\n  /* account factory, only for new accounts */\n  factory?: Address;\n  /* data for account factory (only if account factory exists) */\n  factoryData?: Hex;\n  /* the data to pass to the sender during the main execution call */\n  callData: Hex;\n  /* the amount of gas to allocate the main execution call */\n  callGasLimit: Hex;\n  /* the amount of gas to allocate for the verification step */\n  verificationGasLimit: Hex;\n  /* extra gas to pay the bunder */\n  preVerificationGas: Hex;\n  /* maximum fee per gas (similar to EIP-1559 max_fee_per_gas) */\n  maxFeePerGas: Hex;\n  /* maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas) */\n  maxPriorityFeePerGas: Hex;\n  /* address of paymaster contract, (or empty, if account pays for itself) */\n  paymaster?: Address;\n  /* the amount of gas to allocate for the paymaster validation code */\n  paymasterVerificationGasLimit?: Hex;\n  /* the amount of gas to allocate for the paymaster post-operation code */\n  paymasterPostOpGasLimit?: Hex;\n  /* data for paymaster (only if paymaster exists) */\n  paymasterData?: Hex;\n  /* data passed into the account to verify authorization */\n  signature: Hex;\n}\n// [!endregion UserOperationRequest_v7]\n\n// [!region UserOperationRequest]\n// Reference: https://eips.ethereum.org/EIPS/eip-4337#definitions\nexport type UserOperationRequest<\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n> = TEntryPointVersion extends \"0.6.0\"\n  ? UserOperationRequest_v6\n  : TEntryPointVersion extends \"0.7.0\"\n  ? UserOperationRequest_v7\n  : never;\n\n// [!endregion UserOperationRequest]\n\n// [!region UserOperationEstimateGasResponse]\nexport interface UserOperationEstimateGasResponse<\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n> {\n  /* Gas overhead of this UserOperation */\n  preVerificationGas: BigNumberish;\n  /* Actual gas used by the validation of this UserOperation */\n  verificationGasLimit: BigNumberish;\n  /* Value used by inner account execution */\n  callGasLimit: BigNumberish;\n  /*\n   * EntryPoint v0.7.0 operations only.\n   * The amount of gas to allocate for the paymaster validation code.\n   * Note: `eth_estimateUserOperationGas` does not return paymasterPostOpGasLimit.\n   */\n  paymasterVerificationGasLimit: TEntryPointVersion extends \"0.7.0\"\n    ? BigNumberish | undefined\n    : never;\n}\n// [!endregion UserOperationEstimateGasResponse]\n\n// [!region UserOperationResponse]\nexport interface UserOperationResponse<\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n> {\n  /* the User Operation */\n  userOperation: UserOperationRequest<TEntryPointVersion>;\n  /* the address of the entry point contract that executed the user operation */\n  entryPoint: Address;\n  /* the block number the user operation was included in */\n  blockNumber: BigNumberish;\n  /* the hash of the block the user operation was included in */\n  blockHash: Hash;\n  /* the hash of the transaction that included the user operation */\n  transactionHash: Hash;\n}\n// [!endregion UserOperationResponse]\n\n// [!region UserOperationReceipt]\nexport interface UserOperationReceipt {\n  /* The request hash of the UserOperation. */\n  userOpHash: Hash;\n  /* The entry point address used for the UserOperation. */\n  entryPoint: Address;\n  /* The account initiating the UserOperation. */\n  sender: Address;\n  /* The nonce used in the UserOperation. */\n  nonce: BigNumberish;\n  /* The paymaster used for this UserOperation (or empty). */\n  paymaster?: Address;\n  /* The actual amount paid (by account or paymaster) for this UserOperation. */\n  actualGasCost: BigNumberish;\n  /* The total gas used by this UserOperation (including preVerification, creation, validation, and execution). */\n  actualGasUsed: BigNumberish;\n  /* Indicates whether the execution completed without reverting. */\n  success: boolean;\n  /* In case of revert, this is the revert reason. */\n  reason?: string;\n  /* The logs generated by this UserOperation (not including logs of other UserOperations in the same bundle). */\n  logs: string[];\n  /* The TransactionReceipt object for the entire bundle, not only for this UserOperation. */\n  receipt: TransactionReceipt;\n}\n// [!endregion UserOperationReceipt]\n\n/** @deprecated use viem type TransactionReceipt instead */\nexport interface UserOperationReceiptObject {\n  /* 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending log */\n  blockHash: Hash;\n  /* The block number where this log was in. null when its pending. null when its pending log. */\n  blockNumber: BigNumberish;\n  /* The index of the transaction within the block. */\n  transactionIndex: BigNumberish;\n  /* 32 Bytes - hash of the transaction. null when its pending. */\n  transactionHash: Hash;\n  /* 20 Bytes - address of the sender */\n  from: Address;\n  /* 20 Bytes - address of the receiver. null when its a contract creation transaction */\n  to: Address;\n  /* The total amount of gas used when this transaction was executed in the block. */\n  cumulativeGasUsed: BigNumberish;\n  /* The amount of gas used by this specific transaction alone */\n  gasUsed: BigNumberish;\n  /* 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise null */\n  contractAddress: Address;\n  logs: UserOperationReceiptLog[];\n  /* 256 Bytes - Bloom filter for light clients to quickly retrieve related logs */\n  logsBloom: Hex;\n  /* 32 bytes of post-transaction stateroot. (pre Byzantium hard fork at block 4,370,000) */\n  root: Hex;\n  /* Either 1 (success) or 0 (failure). (post Byzantium hard fork at block 4,370,000) */\n  status: number;\n  /* The cumulative gas used in the block containing this UserOperation. */\n  effectiveGasPrice: BigNumberish;\n  /* The type of the recipt object */\n  type: string;\n}\n\n/** @deprecated use viem type Log instead */\n/* https://github.com/wevm/viem/blob/6ef4ac131a878bf1dc4b335f5dc127e62618dda0/src/types/log.ts#L15 */\nexport interface UserOperationReceiptLog {\n  /* The hash of the block where the given transaction was included. */\n  blockHash: Hash;\n  /* The number of the block where the given transaction was included. */\n  blockNumber: BigNumberish;\n  /* The index of the transaction within the block. */\n  transactionIndex: BigNumberish;\n  /* 20 Bytes - address from which this log originated. */\n  address: Address;\n  /* Integer of the log index position in the block. null when its pending log. */\n  logIndex: BigNumberish;\n  /* Contains one or more 32 Bytes non-indexed arguments of the log. */\n  data: Hex;\n  /* true when the log was removed, due to a chain reorganization. false if its a valid log. */\n  removed: boolean;\n  /* Array of zero to four 32 Bytes DATA of indexed log arguments. */\n  topics: string[];\n  /* hash of the transaction */\n  transactionHash: Hash;\n}\n\n// [!region UserOperationStruct_v6]\n// https://github.com/eth-infinitism/account-abstraction/blob/releases/v0.6/test/UserOperation.ts\n// this is used for building requests for v0.6 entry point contract\nexport interface UserOperationStruct_v6 {\n  /* the origin of the request */\n  sender: string;\n  /* nonce of the transaction, returned from the entry point for this address */\n  nonce: BigNumberish;\n  /* the initCode for creating the sender if it does not exist yet, otherwise \"0x\" */\n  initCode: BytesLike | \"0x\";\n  /* the callData passed to the target */\n  callData: BytesLike;\n  /* Value used by inner account execution */\n  callGasLimit?: BigNumberish;\n  /* Actual gas used by the validation of this UserOperation */\n  verificationGasLimit?: BigNumberish;\n  /* Gas overhead of this UserOperation */\n  preVerificationGas?: BigNumberish;\n  /* Maximum fee per gas (similar to EIP-1559 max_fee_per_gas) */\n  maxFeePerGas?: BigNumberish;\n  /* Maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas) */\n  maxPriorityFeePerGas?: BigNumberish;\n  /* Address of paymaster sponsoring the transaction, followed by extra data to send to the paymaster (\"0x\" for self-sponsored transaction) */\n  paymasterAndData: BytesLike | \"0x\";\n  /* Data passed into the account along with the nonce during the verification step */\n  signature: BytesLike;\n}\n// [!endregion UserOperationStruct_v6]\n\n// [!region UserOperationStruct_v7]\n// based on https://github.com/eth-infinitism/account-abstraction/blob/releases/v0.7/test/UserOperation.ts\n// this is used for building requests for v0.7 entry point contract\nexport interface UserOperationStruct_v7 {\n  /* the account making the operation */\n  sender: string;\n  /* anti-replay parameter. nonce of the transaction, returned from the entry point for this address */\n  nonce: BigNumberish;\n  /* account factory, only for new accounts */\n  factory?: string;\n  /* data for account factory (only if account factory exists) */\n  factoryData?: BytesLike;\n  /* the data to pass to the sender during the main execution call */\n  callData: BytesLike;\n  /* the amount of gas to allocate the main execution call */\n  callGasLimit?: BigNumberish;\n  /* the amount of gas to allocate for the verification step */\n  verificationGasLimit?: BigNumberish;\n  /* extra gas to pay the bunder */\n  preVerificationGas?: BigNumberish;\n  /* maximum fee per gas (similar to EIP-1559 max_fee_per_gas) */\n  maxFeePerGas?: BigNumberish;\n  /* maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas) */\n  maxPriorityFeePerGas?: BigNumberish;\n  /* address of paymaster contract, (or empty, if account pays for itself) */\n  paymaster?: string;\n  /* the amount of gas to allocate for the paymaster validation code */\n  paymasterVerificationGasLimit?: BigNumberish;\n  /* the amount of gas to allocate for the paymaster post-operation code */\n  paymasterPostOpGasLimit?: BigNumberish;\n  /* data for paymaster (only if paymaster exists) */\n  paymasterData?: BytesLike;\n  /* data passed into the account to verify authorization */\n  signature: BytesLike;\n}\n// [!endregion UserOperationStruct_v7]\n\n// [!region UserOperationStruct]\nexport type UserOperationStruct<\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n> = TEntryPointVersion extends \"0.6.0\"\n  ? UserOperationStruct_v6\n  : TEntryPointVersion extends \"0.7.0\"\n  ? UserOperationStruct_v7\n  : never;\n// [!endregion UserOperationStruct]\n"]}