import type { Address } from "abitype";
import type { Hash, Hex, HttpTransport, Transport } from "viem";
import type { SignTypedDataParameters } from "viem/accounts";
import type { z } from "zod";
import type { BundlerClient } from "../client/bundlerClient";
import type { SmartAccountSigner } from "../signer/types";
import type { BatchUserOperationCallData } from "../types";
import type { SimpleSmartAccountParamsSchema, createBaseSmartAccountParamsSchema } from "./schema";
export type SignTypedDataParams = Omit<SignTypedDataParameters, "privateKey">;
export type BaseSmartAccountParams<TTransport extends Transport = Transport, TSigner extends SmartAccountSigner = SmartAccountSigner> = z.input<ReturnType<typeof createBaseSmartAccountParamsSchema<TTransport, TSigner>>>;
export type SimpleSmartAccountParams<TTransport extends Transport = Transport, TSigner extends SmartAccountSigner = SmartAccountSigner> = z.input<ReturnType<typeof SimpleSmartAccountParamsSchema<TTransport, TSigner>>>;
export interface ISmartContractAccount<TTransport extends Transport = Transport, TSigner extends SmartAccountSigner = SmartAccountSigner> {
    readonly rpcProvider: BundlerClient<TTransport> | BundlerClient<HttpTransport>;
    getInitCode(): Promise<Hex>;
    getDummySignature(): Hex | Promise<Hex>;
    encodeExecute(target: string, value: bigint, data: string): Promise<Hex>;
    encodeBatchExecute(txs: BatchUserOperationCallData): Promise<Hex>;
    getNonce(): Promise<bigint>;
    signUserOperationHash(uoHash: Hash): Promise<Hash>;
    signMessage(msg: string | Uint8Array | Hex): Promise<Hex>;
    signTypedData(params: SignTypedDataParams): Promise<Hash>;
    signMessageWith6492(msg: string | Uint8Array | Hex): Promise<Hex>;
    signTypedDataWith6492(params: SignTypedDataParams): Promise<Hash>;
    getAddress(): Promise<Address>;
    getSigner(): TSigner;
    getFactoryAddress(): Address;
    getEntryPointAddress(): Address;
    extend: <R>(extendFn: (self: this) => R) => this & R;
    encodeUpgradeToAndCall: (upgradeToImplAddress: Address, upgradeToInitData: Hex) => Promise<Hex>;
}
