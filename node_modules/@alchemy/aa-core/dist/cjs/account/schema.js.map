{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../src/account/schema.ts"],"names":[],"mappings":";;;;;;AAAA,qCAAsC;AACtC,+BAA6C;AAC7C,8CAAoB;AACpB,mDAAsE;AACtE,qDAA6D;AAE7D,mDAA+C;AAE/C,gDAAgD;AAEzC,MAAM,kCAAkC,GAAG,GAG9C,EAAE,CACJ,aAAC,CAAC,MAAM,CAAC;IACP,SAAS,EAAE,aAAC,CAAC,KAAK,CAAC;QACjB,aAAC,CAAC,MAAM,EAAE;QACV,IAAA,2CAA+B,GAAc;KAC9C,CAAC;IACF,cAAc,EAAE,aAAO;IACvB,MAAM,EAAE,aAAC,CAAC,MAAM,CAAU,oBAAQ,CAAC;IACnC,iBAAiB,EAAE,aAAO,CAAC,QAAQ,EAAE;IACrC,KAAK,EAAE,sBAAW;IAClB,cAAc,EAAE,aAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CACzC,4CAA4C,CAC7C;IACD,QAAQ,EAAE,aAAC;SACR,MAAM,EAAE;SACR,MAAM,CACL,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,YAAK,EAAC,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EACjC,+BAA+B,CAChC;SACA,QAAQ,EAAE;SACV,QAAQ,CAAC,8CAA8C,CAAC;IAC3D,iBAAiB,EAAE,aAAC;SACjB,MAAM,CAAoB,8BAAmB,CAAC;SAC9C,QAAQ,EAAE;CACd,CAAC,CAAC;AA3BQ,QAAA,kCAAkC,sCA2B1C;AAEE,MAAM,8BAA8B,GAAG,GAG1C,EAAE,CACJ,IAAA,0CAAkC,GAAuB;KACtD,IAAI,CAAC;IACJ,SAAS,EAAE,IAAI;CAChB,CAAC;KACD,MAAM,CAAC;IACN,SAAS,EAAE,aAAC,CAAC,MAAM,EAAc;IACjC,IAAI,EAAE,aAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CAC5B,CAAC,CAAC;AAXM,QAAA,8BAA8B,kCAWpC","sourcesContent":["import { Address } from \"abitype/zod\";\nimport { isHex, type Transport } from \"viem\";\nimport z from \"zod\";\nimport { createPublicErc4337ClientSchema } from \"../client/schema.js\";\nimport { isEntryPointVersion } from \"../entrypoint/index.js\";\nimport type { EntryPointVersion } from \"../entrypoint/types.js\";\nimport { isSigner } from \"../signer/schema.js\";\nimport type { SmartAccountSigner } from \"../signer/types.js\";\nimport { ChainSchema } from \"../utils/index.js\";\n\nexport const createBaseSmartAccountParamsSchema = <\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>() =>\n  z.object({\n    rpcClient: z.union([\n      z.string(),\n      createPublicErc4337ClientSchema<TTransport>(),\n    ]),\n    factoryAddress: Address,\n    signer: z.custom<TSigner>(isSigner),\n    entryPointAddress: Address.optional(),\n    chain: ChainSchema,\n    accountAddress: Address.optional().describe(\n      \"Optional override for the account address.\"\n    ),\n    initCode: z\n      .string()\n      .refine(\n        (x) => isHex(x, { strict: true }),\n        \"initCode must be a valid hex.\"\n      )\n      .optional()\n      .describe(\"Optional override for the account init code.\"),\n    entryPointVersion: z\n      .custom<EntryPointVersion>(isEntryPointVersion)\n      .optional(),\n  });\n\nexport const SimpleSmartAccountParamsSchema = <\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>() =>\n  createBaseSmartAccountParamsSchema<TTransport, TSigner>()\n    .omit({\n      rpcClient: true,\n    })\n    .extend({\n      transport: z.custom<TTransport>(),\n      salt: z.bigint().optional(),\n    });\n"]}