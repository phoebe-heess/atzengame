{"version":3,"file":"sendUserOperation.js","sourceRoot":"","sources":["../../../../../src/actions/smartAccount/internal/sendUserOperation.ts"],"names":[],"mappings":";;;AAQA,2DAAkE;AAClE,yDAA+D;AAK/D,kEAA4D;AAUrD,KAAK,UAAU,kBAAkB,CAWtC,MAA4D,EAC5D,IAI+B;IAE/B,MAAM,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;IACxE,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,iCAAoB,EAAE,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAClB,MAAM,IAAI,8BAAkB,EAAE,CAAC;IACjC,CAAC;IAED,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;IAC3C,MAAM,OAAO,GAAG,MAAM,IAAA,wCAAiB,EAAC,MAAM,EAAE;QAC9C,QAAQ;QACR,OAAO;QACP,OAAO;QACP,SAAS;KACV,CAAC,CAAC;IAEH,OAAO;QACL,IAAI,EAAE,MAAM,MAAM,CAAC,oBAAoB,CAAC,OAAO,EAAE,UAAU,CAAC,OAAO,CAAC;QACpE,OAAO;KACR,CAAC;AACJ,CAAC;AAvCD,gDAuCC","sourcesContent":["import type { Chain, Transport } from \"viem\";\nimport type {\n  GetAccountParameter,\n  GetEntryPointFromAccount,\n  SmartContractAccount,\n} from \"../../../account/smartContractAccount\";\nimport type { BaseSmartAccountClient } from \"../../../client/smartAccountClient\";\nimport type { SendUserOperationResult } from \"../../../client/types\";\nimport { AccountNotFoundError } from \"../../../errors/account.js\";\nimport { ChainNotFoundError } from \"../../../errors/client.js\";\nimport type {\n  UserOperationOverrides,\n  UserOperationStruct,\n} from \"../../../types\";\nimport { signUserOperation } from \"../signUserOperation.js\";\nimport type { GetContextParameter, UserOperationContext } from \"../types\";\n\n/**\n * Used internally to send a user operation that has **already** been signed\n *\n * @param client a base smart account client instance with middleware configured\n * @param args user operation struct, overrides, account, and context to be used in sending\n * @returns A Promise containing the send user operation result {@link SendUserOperationResult}\n */\nexport async function _sendUserOperation<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined,\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>\n>(\n  client: BaseSmartAccountClient<TTransport, TChain, TAccount>,\n  args: {\n    uoStruct: UserOperationStruct<TEntryPointVersion>;\n    overrides?: UserOperationOverrides<TEntryPointVersion>;\n  } & GetAccountParameter<TAccount> &\n    GetContextParameter<TContext>\n): Promise<SendUserOperationResult<TEntryPointVersion>> {\n  const { account = client.account, uoStruct, context, overrides } = args;\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n\n  if (!client.chain) {\n    throw new ChainNotFoundError();\n  }\n\n  const entryPoint = account.getEntryPoint();\n  const request = await signUserOperation(client, {\n    uoStruct,\n    account,\n    context,\n    overrides,\n  });\n\n  return {\n    hash: await client.sendRawUserOperation(request, entryPoint.address),\n    request,\n  };\n}\n"]}