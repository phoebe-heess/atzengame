{"version":3,"file":"runMiddlewareStack.js","sourceRoot":"","sources":["../../../../../src/actions/smartAccount/internal/runMiddlewareStack.ts"],"names":[],"mappings":";;;AAOA,2DAAkE;AAClE,6EAAuE;AAMvE,sDAIiC;AAWjC,MAAM,SAAS,GACb,CAAU,GAAG,GAAyC,EAAE,EAAE,CAC1D,KAAK,EAAE,CAAI,EAAE,IAAU,EAAE,EAAE;IACzB,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE,CAAC;QACrB,MAAM,GAAG,MAAM,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAgBG,KAAK,UAAU,mBAAmB,CAWvC,MAA4D,EAC5D,IAIqD;IAErD,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;IAClE,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,iCAAoB,EAAE,CAAC;IACnC,CAAC;IAED,MAAM,EACJ,qBAAqB,EACrB,gBAAgB,GACjB,GAGG,IAAA,iCAAsB,EAAC,SAAS,CAAC;QACnC,CAAC,CAAC;YACE,qBAAqB,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;gBACjD,OAAO;oBACL,GAAG,EAAE;oBACL,GAAG,CAAC,kBAAkB,IAAI,SAAU;wBAClC,CAAC,CAAC,EAAE,gBAAgB,EAAE,SAAS,CAAC,gBAAgB,EAAE;wBAClD,CAAC,CAAC,eAAe,IAAI,SAAU;4BAC7B,WAAW,IAAI,SAAS;4BACxB,SAAS,CAAC,aAAa,KAAK,IAAI;4BAClC,CAAC,CAAC;gCACE,aAAa,EAAE,SAAS,CAAC,aAAa;gCACtC,SAAS,EAAE,SAAS,CAAC,SAAS;6BAC/B;4BACH,CAAC;gCAEC,SAAS,CAAC;iBACf,CAAC;YACJ,CAAC;YACD,gBAAgB,EAAE,kCAAc;SACjC;QACH,CAAC,CAAC;YACE,qBAAqB,EAAE,MAAM,CAAC,UAAU,CAAC,qBAAqB;YAC9D,gBAAgB,EAAE,MAAM,CAAC,UAAU,CAAC,gBAAgB;SACrD,CAAC;IAEN,MAAM,MAAM,GAAG,MAAM,SAAS,CAC5B,qBAAqB,EACrB,MAAM,CAAC,UAAU,CAAC,YAAY,EAC9B,MAAM,CAAC,UAAU,CAAC,YAAY,EAC9B,MAAM,CAAC,UAAU,CAAC,gBAAgB,EAClC,gBAAgB,EAChB,MAAM,CAAC,UAAU,CAAC,sBAAsB,CACzC,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,CAAC,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;IAE9E,OAAO,IAAA,4BAAiB,EAEtB,MAAM,CAAC,CAAC;AACZ,CAAC;AAnED,kDAmEC","sourcesContent":["import type { Chain, Transport } from \"viem\";\nimport type {\n  GetAccountParameter,\n  GetEntryPointFromAccount,\n  SmartContractAccount,\n} from \"../../../account/smartContractAccount\";\nimport type { BaseSmartAccountClient } from \"../../../client/smartAccountClient\";\nimport { AccountNotFoundError } from \"../../../errors/account.js\";\nimport { noopMiddleware } from \"../../../middleware/noopMiddleware.js\";\nimport type { ClientMiddleware } from \"../../../middleware/types\";\nimport type {\n  UserOperationOverridesParameter,\n  UserOperationStruct,\n} from \"../../../types\";\nimport {\n  bypassPaymasterAndData,\n  resolveProperties,\n  type Deferrable,\n} from \"../../../utils/index.js\";\nimport type { UserOperationContext } from \"../types\";\n\n/**\n * Utility method for running a sequence of async functions as a pipeline\n *\n * @template S\n * @template Opts\n * @param fns async functions to run in a pipeline sequence\n * @returns a function that runs the async functions in a pipeline sequence\n */\nconst asyncPipe =\n  <S, Opts>(...fns: ((s: S, opts: Opts) => Promise<S>)[]) =>\n  async (s: S, opts: Opts) => {\n    let result = s;\n    for (const fn of fns) {\n      result = await fn(result, opts);\n    }\n    return result;\n  };\n\n/**\n * Internal method of {@link SmartAccountClient} running the middleware stack for a user operation\n *\n * @async\n * @template TTransport\n * @template TChain\n * @template TAccount\n * @template TContext the {@link UserOperationContext} passed to the middleware\n * @template TEntryPointVersion\n * @param client the smart account client instance that runs the middleware pipeline with\n * @param args the Deferrable {@link UserOperationStruct} to run the middleware pipeline on\n *\n * @returns the resolved {@link UserOperationStruct} after running the middleware pipeline\n */\nexport async function _runMiddlewareStack<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined,\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>\n>(\n  client: BaseSmartAccountClient<TTransport, TChain, TAccount>,\n  args: {\n    uo: Deferrable<UserOperationStruct<TEntryPointVersion>>;\n    context?: TContext;\n  } & GetAccountParameter<TAccount> &\n    UserOperationOverridesParameter<TEntryPointVersion>\n): Promise<UserOperationStruct<TEntryPointVersion>> {\n  const { uo, overrides, account = client.account, context } = args;\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n\n  const {\n    dummyPaymasterAndData,\n    paymasterAndData,\n  }: Pick<\n    ClientMiddleware<TContext>,\n    \"dummyPaymasterAndData\" | \"paymasterAndData\"\n  > = bypassPaymasterAndData(overrides)\n    ? {\n        dummyPaymasterAndData: async (uo, { overrides }) => {\n          return {\n            ...uo,\n            ...(\"paymasterAndData\" in overrides!\n              ? { paymasterAndData: overrides.paymasterAndData }\n              : \"paymasterData\" in overrides! &&\n                \"paymaster\" in overrides &&\n                overrides.paymasterData !== \"0x\"\n              ? {\n                  paymasterData: overrides.paymasterData,\n                  paymaster: overrides.paymaster,\n                }\n              : // At this point, nothing has run so no fields are set\n                // for 0.7 when not using a paymaster, all fields should be undefined\n                undefined),\n          };\n        },\n        paymasterAndData: noopMiddleware,\n      }\n    : {\n        dummyPaymasterAndData: client.middleware.dummyPaymasterAndData,\n        paymasterAndData: client.middleware.paymasterAndData,\n      };\n\n  const result = await asyncPipe(\n    dummyPaymasterAndData,\n    client.middleware.feeEstimator,\n    client.middleware.gasEstimator,\n    client.middleware.customMiddleware,\n    paymasterAndData,\n    client.middleware.userOperationSimulator\n  )(uo, { overrides, feeOptions: client.feeOptions, account, client, context });\n\n  return resolveProperties<\n    UserOperationStruct<GetEntryPointFromAccount<TAccount>>\n  >(result);\n}\n"]}