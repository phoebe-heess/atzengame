{"version":3,"file":"sendTransaction.js","sourceRoot":"","sources":["../../../../src/actions/smartAccount/sendTransaction.ts"],"names":[],"mappings":";;;AAWA,kFAAgF;AAChF,wDAA+D;AAC/D,sDAAiE;AACjE,gEAA6E;AAC7E,oEAA0E;AAE1E,+EAAyE;AACzE,0EAAqE;AAErE,+FAAwF;AAEjF,KAAK,UAAU,eAAe,CAWnC,MAA2C,EAC3C,IAAiE,EACjE,SAAsD,EACtD,OAAkB;IAElB,MAAM,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;IAC1C,IAAI,CAAC,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;QAC5C,MAAM,IAAI,iCAAoB,EAAE,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;QACb,MAAM,IAAI,+CAA8B,EAAE,CAAC;IAC7C,CAAC;IAED,IAAI,CAAC,IAAA,kDAAwB,EAAC,MAAM,CAAC,EAAE,CAAC;QACtC,MAAM,IAAI,mCAAuB,CAC/B,wBAAwB,EACxB,iBAAiB,EACjB,MAAM,CACP,CAAC;IACJ,CAAC;IAED,MAAM,QAAQ,GAAG,MAAM,IAAA,sDAAwB,EAC7C,MAAM,EACN,IAAI,EACJ,SAAS,EACT,OAAO,CACR,CAAC;IAEF,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,IAAA,yCAAkB,EAAC,MAAM,EAAE;QACzD,OAAO,EAAE,OAA+B;QACxC,QAAQ;QACR,OAAO;QACP,SAAS;KACV,CAAC,CAAC;IAEH,OAAO,IAAA,qEAA+B,EAAC,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;QACnE,MAAM,IAAI,4CAAyB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACL,CAAC;AAlDD,0CAkDC","sourcesContent":["import type {\n  Chain,\n  Client,\n  Hex,\n  SendTransactionParameters,\n  Transport,\n} from \"viem\";\nimport type {\n  GetEntryPointFromAccount,\n  SmartContractAccount,\n} from \"../../account/smartContractAccount.js\";\nimport { isBaseSmartAccountClient } from \"../../client/isSmartAccountClient.js\";\nimport { AccountNotFoundError } from \"../../errors/account.js\";\nimport { IncompatibleClientError } from \"../../errors/client.js\";\nimport { TransactionMissingToParamError } from \"../../errors/transaction.js\";\nimport { WaitForUserOperationError } from \"../../errors/useroperation.js\";\nimport type { UserOperationOverrides } from \"../../types.js\";\nimport { buildUserOperationFromTx } from \"./buildUserOperationFromTx.js\";\nimport { _sendUserOperation } from \"./internal/sendUserOperation.js\";\nimport type { UserOperationContext } from \"./types.js\";\nimport { waitForUserOperationTransaction } from \"./waitForUserOperationTransacation.js\";\n\nexport async function sendTransaction<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined,\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: SendTransactionParameters<TChain, TAccount, TChainOverride>,\n  overrides?: UserOperationOverrides<TEntryPointVersion>,\n  context?: TContext\n): Promise<Hex> {\n  const { account = client.account } = args;\n  if (!account || typeof account === \"string\") {\n    throw new AccountNotFoundError();\n  }\n\n  if (!args.to) {\n    throw new TransactionMissingToParamError();\n  }\n\n  if (!isBaseSmartAccountClient(client)) {\n    throw new IncompatibleClientError(\n      \"BaseSmartAccountClient\",\n      \"sendTransaction\",\n      client\n    );\n  }\n\n  const uoStruct = await buildUserOperationFromTx(\n    client,\n    args,\n    overrides,\n    context\n  );\n\n  const { hash, request } = await _sendUserOperation(client, {\n    account: account as SmartContractAccount,\n    uoStruct,\n    context,\n    overrides,\n  });\n\n  return waitForUserOperationTransaction(client, { hash }).catch((e) => {\n    throw new WaitForUserOperationError(request, e);\n  });\n}\n"]}