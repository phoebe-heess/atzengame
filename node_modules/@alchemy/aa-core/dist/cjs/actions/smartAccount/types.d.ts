import type { Hex, RpcTransactionRequest } from "viem";
import type { GetAccountParameter, GetEntryPointFromAccount, SmartContractAccount } from "../../account/smartContractAccount";
import type { UpgradeToData } from "../../client/types";
import type { EntryPointVersion } from "../../entrypoint/types";
import type { BatchUserOperationCallData, UserOperationCallData, UserOperationOverridesParameter, UserOperationRequest, UserOperationStruct } from "../../types";
import type { IsUndefined } from "../../utils";
export type UpgradeAccountParams<TAccount extends SmartContractAccount | undefined, TContext extends UserOperationContext | undefined = UserOperationContext | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>> = {
    upgradeTo: UpgradeToData;
    waitForTx?: boolean;
} & GetAccountParameter<TAccount> & GetContextParameter<TContext> & UserOperationOverridesParameter<TEntryPointVersion>;
export type SendUserOperationParameters<TAccount extends SmartContractAccount | undefined, TContext extends UserOperationContext | undefined = UserOperationContext | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>> = {
    uo: UserOperationCallData | BatchUserOperationCallData;
} & GetAccountParameter<TAccount> & GetContextParameter<TContext> & UserOperationOverridesParameter<TEntryPointVersion>;
export type BuildUserOperationParameters<TAccount extends SmartContractAccount | undefined, TContext extends UserOperationContext | undefined = UserOperationContext | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>> = SendUserOperationParameters<TAccount, TContext, TEntryPointVersion>;
export type SignUserOperationParameters<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>, TContext extends UserOperationContext | undefined = UserOperationContext | undefined> = {
    uoStruct: UserOperationStruct<TEntryPointVersion>;
} & GetAccountParameter<TAccount> & GetContextParameter<TContext>;
export type SendTransactionsParameters<TAccount extends SmartContractAccount | undefined, TContext extends UserOperationContext | undefined = UserOperationContext | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>> = {
    requests: RpcTransactionRequest[];
} & GetAccountParameter<TAccount> & GetContextParameter<TContext> & UserOperationOverridesParameter<TEntryPointVersion>;
export type BuildTransactionParameters<TAccount extends SmartContractAccount | undefined, TContext extends UserOperationContext | undefined = UserOperationContext | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>> = SendTransactionsParameters<TAccount, TContext, TEntryPointVersion>;
export type DropAndReplaceUserOperationParameters<TAccount extends SmartContractAccount | undefined, TContext extends UserOperationContext | undefined = UserOperationContext | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>> = {
    uoToDrop: UserOperationRequest<TEntryPointVersion>;
} & GetAccountParameter<TAccount> & GetContextParameter<TContext> & UserOperationOverridesParameter<TEntryPointVersion>;
export type WaitForUserOperationTxParameters = {
    hash: Hex;
    retries?: {
        intervalMs: number;
        multiplier: number;
        maxRetries: number;
    };
};
export type BuildUserOperationFromTransactionsResult<TEntryPointVersion extends EntryPointVersion = EntryPointVersion> = {
    uoStruct: UserOperationStruct<TEntryPointVersion>;
    batch: BatchUserOperationCallData;
} & UserOperationOverridesParameter<TEntryPointVersion, true>;
export type UserOperationContext = Record<string, any>;
export type GetContextParameter<TContext extends UserOperationContext | undefined = UserOperationContext | undefined> = IsUndefined<TContext> extends true ? {
    context?: TContext;
} : {
    context: TContext;
};
