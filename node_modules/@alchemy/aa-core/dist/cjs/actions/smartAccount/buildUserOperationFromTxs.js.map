{"version":3,"file":"buildUserOperationFromTxs.js","sourceRoot":"","sources":["../../../../src/actions/smartAccount/buildUserOperationFromTxs.ts"],"names":[],"mappings":";;;AAAA,+BAAwE;AAKxE,kFAAgF;AAChF,wDAA+D;AAC/D,sDAAiE;AACjE,gEAA6E;AAE7E,mDAAiD;AACjD,mEAA6D;AA6EtD,KAAK,UAAU,yBAAyB,CAW7C,MAA4C,EAC5C,IAAwE;IAExE,MAAM,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;IACxE,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,iCAAoB,EAAE,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,IAAA,kDAAwB,EAAC,MAAM,CAAC,EAAE,CAAC;QACtC,MAAM,IAAI,mCAAuB,CAC/B,wBAAwB,EACxB,2BAA2B,EAC3B,MAAM,CACP,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;QACrC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC;YAChB,MAAM,IAAI,+CAA8B,EAAE,CAAC;QAC7C,CAAC;QAED,OAAO;YACL,MAAM,EAAE,OAAO,CAAC,EAAE;YAClB,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,IAAI;YAC1B,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAA,cAAO,EAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;SAC7D,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAG,GAAG,EAAE,CAC7B,QAAQ;SACL,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC;SACrC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,cAAO,EAAC,CAAC,CAAC,YAAa,EAAE,QAAQ,CAAC,CAAC,CAAC;IACpD,MAAM,YAAY,GAChB,SAAS,EAAE,YAAY,IAAI,IAAI;QAC7B,CAAC,CAAC,SAAS,EAAE,YAAY;QACzB,CAAC,CAAC,iBAAiB,EAAE,CAAC,MAAM,GAAG,CAAC;YAChC,CAAC,CAAC,IAAA,oBAAS,EAAC,GAAG,iBAAiB,EAAE,CAAC;YACnC,CAAC,CAAC,SAAS,CAAC;IAEhB,MAAM,kBAAkB,GAAG,GAAG,EAAE,CAC9B,QAAQ;SACL,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,oBAAoB,IAAI,IAAI,CAAC;SAC7C,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,cAAO,EAAC,CAAC,CAAC,oBAAqB,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC5D,MAAM,oBAAoB,GACxB,SAAS,EAAE,oBAAoB,IAAI,IAAI;QACrC,CAAC,CAAC,SAAS,EAAE,oBAAoB;QACjC,CAAC,CAAC,kBAAkB,EAAE,CAAC,MAAM,GAAG,CAAC;YACjC,CAAC,CAAC,IAAA,oBAAS,EAAC,GAAG,kBAAkB,EAAE,CAAC;YACpC,CAAC,CAAC,SAAS,CAAC;IAEhB,MAAM,UAAU,GAAG;QACjB,YAAY;QACZ,oBAAoB;KACyB,CAAC;IAEhD,MAAM,QAAQ,GAAG,MAAM,IAAA,0CAAkB,EAAC,MAAM,EAAE;QAChD,EAAE,EAAE,KAAK;QACT,OAAO;QACP,OAAO;QACP,SAAS,EAAE,UAAU;KACtB,CAAC,CAAC;IAEH,OAAO;QACL,QAAQ;QAER,KAAK;QACL,SAAS,EAAE,UAAU;KACtB,CAAC;AACJ,CAAC;AA/ED,8DA+EC","sourcesContent":["import { fromHex, type Chain, type Client, type Transport } from \"viem\";\nimport type {\n  GetEntryPointFromAccount,\n  SmartContractAccount,\n} from \"../../account/smartContractAccount\";\nimport { isBaseSmartAccountClient } from \"../../client/isSmartAccountClient.js\";\nimport { AccountNotFoundError } from \"../../errors/account.js\";\nimport { IncompatibleClientError } from \"../../errors/client.js\";\nimport { TransactionMissingToParamError } from \"../../errors/transaction.js\";\nimport type { UserOperationOverrides } from \"../../types\";\nimport { bigIntMax } from \"../../utils/index.js\";\nimport { buildUserOperation } from \"./buildUserOperation.js\";\nimport type {\n  BuildTransactionParameters,\n  BuildUserOperationFromTransactionsResult,\n  UserOperationContext,\n} from \"./types\";\n\n/**\n * Performs {@link buildUserOperationFromTx} in batch and builds into a single,\n * yet to be signed `UserOperation` (UO) struct. The output user operation struct\n * will be filled with all gas fields (and paymaster data if a paymaster is used)\n * based on the transactions data (`to`, `data`, `value`, `maxFeePerGas`,\n * `maxPriorityFeePerGas`) computed using the configured\n * [`ClientMiddlewares`](/packages/aa-core/smart-account-client/middleware/index) on the `SmartAccountClient`\n * \n * @example\n * ```ts\n * import type { RpcTransactionRequest } from \"viem\";\nimport { smartAccountClient } from \"./smartAccountClient\";\n// [!code focus:99]\n// buildUserOperationFromTxs converts traditional Ethereum transactions in batch and returns\n// the unsigned user operation struct after constructing the user operation struct\n// through the middleware pipeline\nconst requests: RpcTransactionRequest[] = [\n  {\n    from, // ignored\n    to,\n    data: encodeFunctionData({\n      abi: ContractABI.abi,\n      functionName: \"func\",\n      args: [arg1, arg2, ...],\n    }),\n  },\n  {\n    from, // ignored\n    to,\n    data: encodeFunctionData({\n      abi: ContractABI.abi,\n      functionName: \"func\",\n      args: [arg1, arg2, ...],\n    }),\n  },\n  ...\n  {\n    from, // ignored\n    to,\n    data: encodeFunctionData({\n      abi: ContractABI.abi,\n      functionName: \"func\",\n      args: [arg1, arg2, ...],\n    }),\n  },\n];\nconst uoStruct = await smartAccountClient.buildUserOperationFromTxs({\n  requests,\n});\n \n// signUserOperation signs the above unsigned user operation struct built\n// using the account connected to the smart account client\nconst request = await smartAccountClient.signUserOperation({ uoStruct });\n \n// You can use the BundlerAction `sendRawUserOperation` (packages/core/src/actions/bundler/sendRawUserOperation.ts)\n// to send the signed user operation request to the bundler, requesting the bundler to send the signed uo to the\n// EntryPoint contract pointed at by the entryPoint address parameter\nconst entryPointAddress = client.account.getEntryPoint().address;\nconst uoHash = await smartAccountClient.sendRawUserOperation({\n  request,\n  entryPoint: entryPointAddress,\n});\n * ```\n *\n * @param client the smart account client to use to make RPC calls\n * @param args {@link BuildTransactionParameters} an object containing the requests\n * to build as well as, the account if not hoisted, the context, the overrides, and\n * optionally a flag to enable signing of the UO via the underlying middleware\n * @returns a Promise containing the built user operation\n */\nexport async function buildUserOperationFromTxs<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>,\n  args: BuildTransactionParameters<TAccount, TContext, TEntryPointVersion>\n): Promise<BuildUserOperationFromTransactionsResult<TEntryPointVersion>> {\n  const { account = client.account, requests, overrides, context } = args;\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n\n  if (!isBaseSmartAccountClient(client)) {\n    throw new IncompatibleClientError(\n      \"BaseSmartAccountClient\",\n      \"buildUserOperationFromTxs\",\n      client\n    );\n  }\n\n  const batch = requests.map((request) => {\n    if (!request.to) {\n      throw new TransactionMissingToParamError();\n    }\n\n    return {\n      target: request.to,\n      data: request.data ?? \"0x\",\n      value: request.value ? fromHex(request.value, \"bigint\") : 0n,\n    };\n  });\n\n  const mfpgOverridesInTx = () =>\n    requests\n      .filter((x) => x.maxFeePerGas != null)\n      .map((x) => fromHex(x.maxFeePerGas!, \"bigint\"));\n  const maxFeePerGas =\n    overrides?.maxFeePerGas != null\n      ? overrides?.maxFeePerGas\n      : mfpgOverridesInTx().length > 0\n      ? bigIntMax(...mfpgOverridesInTx())\n      : undefined;\n\n  const mpfpgOverridesInTx = () =>\n    requests\n      .filter((x) => x.maxPriorityFeePerGas != null)\n      .map((x) => fromHex(x.maxPriorityFeePerGas!, \"bigint\"));\n  const maxPriorityFeePerGas =\n    overrides?.maxPriorityFeePerGas != null\n      ? overrides?.maxPriorityFeePerGas\n      : mpfpgOverridesInTx().length > 0\n      ? bigIntMax(...mpfpgOverridesInTx())\n      : undefined;\n\n  const _overrides = {\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n  } as UserOperationOverrides<TEntryPointVersion>;\n\n  const uoStruct = await buildUserOperation(client, {\n    uo: batch,\n    account,\n    context,\n    overrides: _overrides,\n  });\n\n  return {\n    uoStruct,\n    // TODO: in v4 major version update, remove these as below parameters are not needed\n    batch,\n    overrides: _overrides,\n  };\n}\n"]}