{"version":3,"file":"dropAndReplaceUserOperation.js","sourceRoot":"","sources":["../../../../src/actions/smartAccount/dropAndReplaceUserOperation.ts"],"names":[],"mappings":";;;AAKA,kFAAgF;AAEhF,wDAA+D;AAC/D,sDAAiE;AAMjE,mDAAiE;AACjE,4EAAuE;AACvE,0EAAqE;AAM9D,KAAK,UAAU,2BAA2B,CAW/C,MAA4C,EAC5C,IAA+D;IAE/D,MAAM,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;IACxE,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,iCAAoB,EAAE,CAAC;IACnC,CAAC;IACD,IAAI,CAAC,IAAA,kDAAwB,EAAC,MAAM,CAAC,EAAE,CAAC;QACtC,MAAM,IAAI,mCAAuB,CAC/B,wBAAwB,EACxB,6BAA6B,EAC7B,MAAM,CACP,CAAC;IACJ,CAAC;IAED,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;IAE3C,MAAM,UAAU,GAAG,CACjB,UAAU,CAAC,OAAO,KAAK,OAAO;QAC5B,CAAC,CAAC;YACE,QAAQ,EAAG,QAA0C,CAAC,QAAQ;YAC9D,MAAM,EAAG,QAA0C,CAAC,MAAM;YAC1D,KAAK,EAAG,QAA0C,CAAC,KAAK;YACxD,QAAQ,EAAG,QAA0C,CAAC,QAAQ;YAC9D,SAAS,EAAE,MAAM,OAAO,CAAC,iBAAiB,EAAE;SAC7C;QACH,CAAC,CAAC;YACE,GAAG,CAAE,QAA0C,CAAC,OAAO;gBACtD,QAA0C,CAAC,WAAW;gBACrD,CAAC,CAAC;oBACE,OAAO,EAAG,QAA0C,CAAC,OAAO;oBAC5D,WAAW,EAAG,QAA0C;yBACrD,WAAW;iBACf;gBACH,CAAC,CAAC,EAAE,CAAC;YACP,MAAM,EAAG,QAA0C,CAAC,MAAM;YAC1D,KAAK,EAAG,QAA0C,CAAC,KAAK;YACxD,QAAQ,EAAG,QAA0C,CAAC,QAAQ;YAC9D,SAAS,EAAE,MAAM,OAAO,CAAC,iBAAiB,EAAE;SAC7C,CACqC,CAAC;IAI7C,MAAM,EAAE,YAAY,EAAE,oBAAoB,EAAE,GAAG,MAAM,IAAA,2CAAmB,EACtE,MAAM,EACN;QACE,EAAE,EAAE,UAAU;QACd,SAAS;QACT,OAAO;KACR,CACF,CAAC;IAEF,MAAM,UAAU,GAAG;QACjB,GAAG,SAAS;QACZ,YAAY,EAAE,IAAA,oBAAS,EACrB,MAAM,CAAC,YAAY,IAAI,EAAE,CAAC,EAC1B,IAAA,yBAAc,EAAC,QAAQ,CAAC,YAAY,EAAE,GAAG,CAAC,CAC3C;QACD,oBAAoB,EAAE,IAAA,oBAAS,EAC7B,MAAM,CAAC,oBAAoB,IAAI,EAAE,CAAC,EAClC,IAAA,yBAAc,EAAC,QAAQ,CAAC,oBAAoB,EAAE,GAAG,CAAC,CACnD;KAC4C,CAAC;IAEhD,MAAM,QAAQ,GAAG,MAAM,IAAA,2CAAmB,EAAC,MAAM,EAAE;QACjD,EAAE,EAAE,UAAU;QACd,SAAS,EAAE,UAAU;QACrB,OAAO;KACR,CAAC,CAAC;IAEH,OAAO,IAAA,yCAAkB,EAAC,MAAM,EAAE;QAChC,QAAQ,EAAE,QAAQ;QAClB,OAAO;QACP,OAAO;QACP,SAAS,EAAE,UAAU;KACtB,CAAC,CAAC;AACL,CAAC;AAxFD,kEAwFC","sourcesContent":["import type { Chain, Client, Transport } from \"viem\";\nimport type {\n  GetEntryPointFromAccount,\n  SmartContractAccount,\n} from \"../../account/smartContractAccount\";\nimport { isBaseSmartAccountClient } from \"../../client/isSmartAccountClient.js\";\nimport type { SendUserOperationResult } from \"../../client/types\";\nimport { AccountNotFoundError } from \"../../errors/account.js\";\nimport { IncompatibleClientError } from \"../../errors/client.js\";\nimport type {\n  UserOperationOverrides,\n  UserOperationRequest,\n  UserOperationStruct,\n} from \"../../types\";\nimport { bigIntMax, bigIntMultiply } from \"../../utils/index.js\";\nimport { _runMiddlewareStack } from \"./internal/runMiddlewareStack.js\";\nimport { _sendUserOperation } from \"./internal/sendUserOperation.js\";\nimport type {\n  DropAndReplaceUserOperationParameters,\n  UserOperationContext,\n} from \"./types\";\n\nexport async function dropAndReplaceUserOperation<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined,\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>\n>(\n  client: Client<TTransport, TChain, TAccount>,\n  args: DropAndReplaceUserOperationParameters<TAccount, TContext>\n): Promise<SendUserOperationResult<TEntryPointVersion>> {\n  const { account = client.account, uoToDrop, overrides, context } = args;\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n  if (!isBaseSmartAccountClient(client)) {\n    throw new IncompatibleClientError(\n      \"BaseSmartAccountClient\",\n      \"dropAndReplaceUserOperation\",\n      client\n    );\n  }\n\n  const entryPoint = account.getEntryPoint();\n\n  const uoToSubmit = (\n    entryPoint.version === \"0.6.0\"\n      ? {\n          initCode: (uoToDrop as UserOperationRequest<\"0.6.0\">).initCode,\n          sender: (uoToDrop as UserOperationRequest<\"0.6.0\">).sender,\n          nonce: (uoToDrop as UserOperationRequest<\"0.6.0\">).nonce,\n          callData: (uoToDrop as UserOperationRequest<\"0.6.0\">).callData,\n          signature: await account.getDummySignature(),\n        }\n      : {\n          ...((uoToDrop as UserOperationRequest<\"0.7.0\">).factory &&\n          (uoToDrop as UserOperationRequest<\"0.7.0\">).factoryData\n            ? {\n                factory: (uoToDrop as UserOperationRequest<\"0.7.0\">).factory,\n                factoryData: (uoToDrop as UserOperationRequest<\"0.7.0\">)\n                  .factoryData,\n              }\n            : {}),\n          sender: (uoToDrop as UserOperationRequest<\"0.7.0\">).sender,\n          nonce: (uoToDrop as UserOperationRequest<\"0.7.0\">).nonce,\n          callData: (uoToDrop as UserOperationRequest<\"0.7.0\">).callData,\n          signature: await account.getDummySignature(),\n        }\n  ) as UserOperationStruct<TEntryPointVersion>;\n\n  // Run once to get the fee estimates\n  // This can happen at any part of the middleware stack, so we want to run it all\n  const { maxFeePerGas, maxPriorityFeePerGas } = await _runMiddlewareStack(\n    client,\n    {\n      uo: uoToSubmit,\n      overrides,\n      account,\n    }\n  );\n\n  const _overrides = {\n    ...overrides,\n    maxFeePerGas: bigIntMax(\n      BigInt(maxFeePerGas ?? 0n),\n      bigIntMultiply(uoToDrop.maxFeePerGas, 1.1)\n    ),\n    maxPriorityFeePerGas: bigIntMax(\n      BigInt(maxPriorityFeePerGas ?? 0n),\n      bigIntMultiply(uoToDrop.maxPriorityFeePerGas, 1.1)\n    ),\n  } as UserOperationOverrides<TEntryPointVersion>;\n\n  const uoToSend = await _runMiddlewareStack(client, {\n    uo: uoToSubmit,\n    overrides: _overrides,\n    account,\n  });\n\n  return _sendUserOperation(client, {\n    uoStruct: uoToSend,\n    account,\n    context,\n    overrides: _overrides,\n  });\n}\n"]}