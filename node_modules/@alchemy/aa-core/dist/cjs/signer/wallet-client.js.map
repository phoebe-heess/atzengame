{"version":3,"file":"wallet-client.js","sourceRoot":"","sources":["../../../src/signer/wallet-client.ts"],"names":[],"mappings":";;;AAAA,+BAOc;AACd,mDAA6D;AAG7D,MAAa,kBAAkB;IAI7B,YAAY,MAAoB,EAAE,UAAkB;QAHpD;;;;;WAAmB;QACnB;;;;;WAAoB;QAUpB;;;;mBAA2C,KAAK,IAAI,EAAE;gBACpD,IAAI,SAAS,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;gBAChD,OAAO,IAAA,iBAAU,EAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,CAAC;WAAC;QAEO;;;;mBACP,KAAK,EAAE,OAAO,EAAE,EAAE;gBAChB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;gBAEhE,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;YACtD,CAAC;WAAC;QAEJ;;;;mBAAgB,KAAK,EAInB,SAAwD,EAC1C,EAAE;gBAChB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;gBAEhE,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;oBAC9B,OAAO;oBACP,GAAG,SAAS;iBACb,CAAC,CAAC;YACL,CAAC;WAAC;QA/BA,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QACpB,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,MAAM,IAAI,kCAAsB,CAAC,UAAU,CAAC,CAAC;QAC/C,CAAC;QACD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;CA2BF;AArCD,gDAqCC","sourcesContent":["import {\n  getAddress,\n  type Hex,\n  type SignableMessage,\n  type TypedData,\n  type TypedDataDefinition,\n  type WalletClient,\n} from \"viem\";\nimport { InvalidSignerTypeError } from \"../errors/signer.js\";\nimport type { SmartAccountSigner } from \"./types\";\n\nexport class WalletClientSigner implements SmartAccountSigner<WalletClient> {\n  signerType: string;\n  inner: WalletClient;\n\n  constructor(client: WalletClient, signerType: string) {\n    this.inner = client;\n    if (!signerType) {\n      throw new InvalidSignerTypeError(signerType);\n    }\n    this.signerType = signerType;\n  }\n\n  getAddress: () => Promise<`0x${string}`> = async () => {\n    let addresses = await this.inner.getAddresses();\n    return getAddress(addresses[0]);\n  };\n\n  readonly signMessage: (message: SignableMessage) => Promise<`0x${string}`> =\n    async (message) => {\n      const account = this.inner.account ?? (await this.getAddress());\n\n      return this.inner.signMessage({ message, account });\n    };\n\n  signTypedData = async <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string = string\n  >(\n    typedData: TypedDataDefinition<TTypedData, TPrimaryType>\n  ): Promise<Hex> => {\n    const account = this.inner.account ?? (await this.getAddress());\n\n    return this.inner.signTypedData({\n      account,\n      ...typedData,\n    });\n  };\n}\n"]}