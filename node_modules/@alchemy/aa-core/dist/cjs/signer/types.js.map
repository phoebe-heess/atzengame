{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/signer/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Address } from \"abitype\";\nimport type {\n  Hex,\n  SignableMessage,\n  TypedData,\n  TypedDataDefinition,\n} from \"viem\";\n\n// [!region SmartAccountAuthenticator]\n/**\n * Extends the @interface SmartAccountSigner interface with authentication.\n *\n * @template AuthParams - the generic type of the authentication parameters\n * @template AuthDetails - the generic type of the authentication details\n * @template Inner - the generic type of the inner client that the signer wraps to provide functionality such as signing, etc.\n */\nexport interface SmartAccountAuthenticator<AuthParams, AuthDetails, Inner = any>\n  extends SmartAccountSigner<Inner> {\n  authenticate: (params: AuthParams) => Promise<AuthDetails>;\n\n  getAuthDetails: () => Promise<AuthDetails>;\n}\n// [!endregion SmartAccountAuthenticator]\n\n// [!region SmartAccountSigner]\n/**\n * A signer that can sign messages and typed data.\n *\n * @template Inner - the generic type of the inner client that the signer wraps to provide functionality such as signing, etc.\n */\nexport interface SmartAccountSigner<Inner = any> {\n  signerType: string;\n  inner: Inner;\n\n  getAddress: () => Promise<Address>;\n\n  signMessage: (message: SignableMessage) => Promise<Hex>;\n\n  signTypedData: <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string = string\n  >(\n    params: TypedDataDefinition<TTypedData, TPrimaryType>\n  ) => Promise<Hex>;\n}\n// [!endregion SmartAccountSigner]\n"]}