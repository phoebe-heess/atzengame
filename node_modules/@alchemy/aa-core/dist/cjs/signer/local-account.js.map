{"version":3,"file":"local-account.js","sourceRoot":"","sources":["../../../src/signer/local-account.ts"],"names":[],"mappings":";;;AAUA,4CAAuE;AAGvE,MAAa,kBAAkB;IAO7B,YAAY,KAAQ;QAHpB;;;;;WAAS;QACT;;;;;WAAmB;QAOV;;;;mBAAoE,CAC3E,OAAO,EACP,EAAE;gBACF,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;YAC7C,CAAC;WAAC;QAEO;;;;mBAAgB,KAAK,EAI5B,MAAqD,EACvC,EAAE;gBAChB,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC1C,CAAC;WAAC;QAEO;;;;mBAA2C,KAAK,IAAI,EAAE;gBAC7D,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;YAC5B,CAAC;WAAC;QArBA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC;IAC/B,CAAC;IAqBD,MAAM,CAAC,uBAAuB,CAC5B,GAAW,EACX,IAAgB;QAEhB,MAAM,MAAM,GAAG,IAAA,4BAAiB,EAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC5C,OAAO,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAED,MAAM,CAAC,yBAAyB,CAC9B,GAAQ;QAER,MAAM,MAAM,GAAG,IAAA,8BAAmB,EAAC,GAAG,CAAC,CAAC;QACxC,OAAO,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;CACF;AA7CD,gDA6CC","sourcesContent":["import {\n  type HDAccount,\n  type HDOptions,\n  type Hex,\n  type LocalAccount,\n  type PrivateKeyAccount,\n  type SignableMessage,\n  type TypedData,\n  type TypedDataDefinition,\n} from \"viem\";\nimport { mnemonicToAccount, privateKeyToAccount } from \"viem/accounts\";\nimport type { SmartAccountSigner } from \"./types.js\";\n\nexport class LocalAccountSigner<\n  T extends HDAccount | PrivateKeyAccount | LocalAccount\n> implements SmartAccountSigner<T>\n{\n  inner: T;\n  signerType: string;\n\n  constructor(inner: T) {\n    this.inner = inner;\n    this.signerType = inner.type; //  type: \"local\"\n  }\n\n  readonly signMessage: (message: SignableMessage) => Promise<`0x${string}`> = (\n    message\n  ) => {\n    return this.inner.signMessage({ message });\n  };\n\n  readonly signTypedData = async <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string = string\n  >(\n    params: TypedDataDefinition<TTypedData, TPrimaryType>\n  ): Promise<Hex> => {\n    return this.inner.signTypedData(params);\n  };\n\n  readonly getAddress: () => Promise<`0x${string}`> = async () => {\n    return this.inner.address;\n  };\n\n  static mnemonicToAccountSigner(\n    key: string,\n    opts?: HDOptions\n  ): LocalAccountSigner<HDAccount> {\n    const signer = mnemonicToAccount(key, opts);\n    return new LocalAccountSigner(signer);\n  }\n\n  static privateKeyToAccountSigner(\n    key: Hex\n  ): LocalAccountSigner<PrivateKeyAccount> {\n    const signer = privateKeyToAccount(key);\n    return new LocalAccountSigner(signer);\n  }\n}\n"]}