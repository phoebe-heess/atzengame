import type { Chain, Transport } from "viem";
import type { GetEntryPointFromAccount, SmartContractAccount } from "../../../account/smartContractAccount.js";
import type { BaseSmartAccountClient } from "../../../client/smartAccountClient.js";
import type { UserOperationStruct } from "../../../types.js";
import { type Deferrable } from "../../../utils/index.js";
import type { BuildUserOperationParameters, SendUserOperationParameters, UserOperationContext } from "../types.js";
/**
 * Description internal action function of SmartAccountClient for initializing
 * a user operation for the sender account
 *
 * @async
 * @template {Transport} TTransport
 * @template {Chain | undefined} TChain
 * @template {SmartContractAccount | undefined} TAccount
 * @template {UserOperationContext | undefined} TContext
 * @template {GetEntryPointFromAccount} TEntryPointVersion
 * @param client smart account client
 * @param args send user operation parameters
 * @returns initialized user operation struct
 */
export declare function _initUserOperation<TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined, TContext extends UserOperationContext | undefined = UserOperationContext | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>>(client: BaseSmartAccountClient<TTransport, TChain, TAccount>, args: SendUserOperationParameters<TAccount, TContext, TEntryPointVersion> | BuildUserOperationParameters<TAccount, TContext, TEntryPointVersion>): Promise<Deferrable<UserOperationStruct<TEntryPointVersion>>>;
//# sourceMappingURL=initUserOperation.d.ts.map