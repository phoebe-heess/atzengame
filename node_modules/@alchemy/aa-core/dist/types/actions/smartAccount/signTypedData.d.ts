import type { Chain, Client, Hex, Transport, TypedData, TypedDataDefinition } from "viem";
import type { GetAccountParameter, SmartContractAccount } from "../../account/smartContractAccount";
export type SignTypedDataParameters<TTypedData extends TypedData | {
    [key: string]: unknown;
}, TPrimaryType extends string = string, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined> = {
    typedData: TypedDataDefinition<TTypedData, TPrimaryType>;
} & GetAccountParameter<TAccount>;
export declare const signTypedData: <const TTypedData extends TypedData | {
    [key: string]: unknown;
}, TPrimaryType extends string = string, TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined>(client: Client<TTransport, TChain, TAccount>, args: SignTypedDataParameters<TTypedData, TPrimaryType, TAccount>) => Promise<Hex>;
//# sourceMappingURL=signTypedData.d.ts.map