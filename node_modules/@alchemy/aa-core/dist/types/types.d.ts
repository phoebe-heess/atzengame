import { type Address, type Hash, type Hex, type StateOverride, type TransactionReceipt } from "viem";
import type { z } from "zod";
import type { UserOperationFeeOptionsFieldSchema, UserOperationFeeOptionsSchema, UserOperationFeeOptionsSchema_v6, UserOperationFeeOptionsSchema_v7 } from "./client/schema";
import type { EntryPointVersion } from "./entrypoint/types";
import type { BigNumberishRangeSchema, BigNumberishSchema, MultiplierSchema, NoUndefined } from "./utils";
export type EmptyHex = `0x`;
export type NullAddress = `0x0`;
export type PromiseOrValue<T> = T | Promise<T>;
export type BytesLike = Uint8Array | Hex;
export type Multiplier = z.input<typeof MultiplierSchema>;
export type BigNumberish = z.input<typeof BigNumberishSchema>;
export type BigNumberishRange = z.input<typeof BigNumberishRangeSchema>;
export type UserOperationCallData = {
    target: Address;
    data: Hex;
    value?: bigint;
} | Hex;
export type BatchUserOperationCallData = Exclude<UserOperationCallData, Hex>[];
export type UserOperationFeeOptionsField = z.input<typeof UserOperationFeeOptionsFieldSchema>;
export type UserOperationFeeOptions<TEntryPointVersion extends EntryPointVersion = EntryPointVersion> = TEntryPointVersion extends "0.6.0" ? z.input<typeof UserOperationFeeOptionsSchema_v6> : TEntryPointVersion extends "0.7.0" ? z.input<typeof UserOperationFeeOptionsSchema_v7> : z.input<typeof UserOperationFeeOptionsSchema>;
export type UserOperationOverridesParameter<TEntryPointVersion extends EntryPointVersion = EntryPointVersion, Required extends boolean = false> = Required extends true ? {
    overrides: UserOperationOverrides<TEntryPointVersion>;
} : {
    overrides?: UserOperationOverrides<TEntryPointVersion>;
};
export type UserOperationPaymasterOverrides<TEntryPointVersion extends EntryPointVersion = EntryPointVersion> = TEntryPointVersion extends "0.6.0" ? {
    paymasterAndData: Hex;
} : TEntryPointVersion extends "0.7.0" ? {
    paymasterData: Hex;
    paymaster: Address;
    paymasterVerificationGasLimit: NoUndefined<UserOperationStruct<"0.7.0">["paymasterVerificationGasLimit"]> | Multiplier;
    paymasterPostOpGasLimit: NoUndefined<UserOperationStruct<"0.7.0">["paymasterPostOpGasLimit"]> | Multiplier;
} : {};
export type UserOperationOverrides<TEntryPointVersion extends EntryPointVersion = EntryPointVersion> = Partial<{
    callGasLimit: UserOperationStruct<TEntryPointVersion>["callGasLimit"] | Multiplier;
    maxFeePerGas: UserOperationStruct<TEntryPointVersion>["maxFeePerGas"] | Multiplier;
    maxPriorityFeePerGas: UserOperationStruct<TEntryPointVersion>["maxPriorityFeePerGas"] | Multiplier;
    preVerificationGas: UserOperationStruct<TEntryPointVersion>["preVerificationGas"] | Multiplier;
    verificationGasLimit: UserOperationStruct<TEntryPointVersion>["verificationGasLimit"] | Multiplier;
    /**
     * This can be used to override the key used when calling `entryPoint.getNonce`
     * It is useful when you want to use parallel nonces for user operations
     *
     * NOTE: not all bundlers fully support this feature and it could be that your bundler will still only include
     * one user operation for your account in a bundle
     */
    nonceKey: bigint;
    /**
     * The same state overrides for
     * [`eth_call`](https://geth.ethereum.org/docs/interacting-with-geth/rpc/ns-eth#eth-call) method.
     * An address-to-state mapping, where each entry specifies some state to be ephemerally overridden
     * prior to executing the call. State overrides allow you to customize the network state for
     * the purpose of the simulation, so this feature is useful when you need to estimate gas
     * for user operation scenarios under conditions that arenâ€™t currently present on the live network.
     */
    stateOverride: StateOverride;
} & UserOperationPaymasterOverrides<TEntryPointVersion>>;
export interface UserOperationRequest_v6 {
    sender: Address;
    nonce: Hex;
    initCode: Hex | EmptyHex;
    callData: Hex;
    callGasLimit: Hex;
    verificationGasLimit: Hex;
    preVerificationGas: Hex;
    maxFeePerGas: Hex;
    maxPriorityFeePerGas: Hex;
    paymasterAndData: Hex | EmptyHex;
    signature: Hex;
}
export interface UserOperationRequest_v7 {
    sender: Address;
    nonce: Hex;
    factory?: Address;
    factoryData?: Hex;
    callData: Hex;
    callGasLimit: Hex;
    verificationGasLimit: Hex;
    preVerificationGas: Hex;
    maxFeePerGas: Hex;
    maxPriorityFeePerGas: Hex;
    paymaster?: Address;
    paymasterVerificationGasLimit?: Hex;
    paymasterPostOpGasLimit?: Hex;
    paymasterData?: Hex;
    signature: Hex;
}
export type UserOperationRequest<TEntryPointVersion extends EntryPointVersion = EntryPointVersion> = TEntryPointVersion extends "0.6.0" ? UserOperationRequest_v6 : TEntryPointVersion extends "0.7.0" ? UserOperationRequest_v7 : never;
export interface UserOperationEstimateGasResponse<TEntryPointVersion extends EntryPointVersion = EntryPointVersion> {
    preVerificationGas: BigNumberish;
    verificationGasLimit: BigNumberish;
    callGasLimit: BigNumberish;
    paymasterVerificationGasLimit: TEntryPointVersion extends "0.7.0" ? BigNumberish | undefined : never;
}
export interface UserOperationResponse<TEntryPointVersion extends EntryPointVersion = EntryPointVersion> {
    userOperation: UserOperationRequest<TEntryPointVersion>;
    entryPoint: Address;
    blockNumber: BigNumberish;
    blockHash: Hash;
    transactionHash: Hash;
}
export interface UserOperationReceipt {
    userOpHash: Hash;
    entryPoint: Address;
    sender: Address;
    nonce: BigNumberish;
    paymaster?: Address;
    actualGasCost: BigNumberish;
    actualGasUsed: BigNumberish;
    success: boolean;
    reason?: string;
    logs: string[];
    receipt: TransactionReceipt;
}
/** @deprecated use viem type TransactionReceipt instead */
export interface UserOperationReceiptObject {
    blockHash: Hash;
    blockNumber: BigNumberish;
    transactionIndex: BigNumberish;
    transactionHash: Hash;
    from: Address;
    to: Address;
    cumulativeGasUsed: BigNumberish;
    gasUsed: BigNumberish;
    contractAddress: Address;
    logs: UserOperationReceiptLog[];
    logsBloom: Hex;
    root: Hex;
    status: number;
    effectiveGasPrice: BigNumberish;
    type: string;
}
/** @deprecated use viem type Log instead */
export interface UserOperationReceiptLog {
    blockHash: Hash;
    blockNumber: BigNumberish;
    transactionIndex: BigNumberish;
    address: Address;
    logIndex: BigNumberish;
    data: Hex;
    removed: boolean;
    topics: string[];
    transactionHash: Hash;
}
export interface UserOperationStruct_v6 {
    sender: string;
    nonce: BigNumberish;
    initCode: BytesLike | "0x";
    callData: BytesLike;
    callGasLimit?: BigNumberish;
    verificationGasLimit?: BigNumberish;
    preVerificationGas?: BigNumberish;
    maxFeePerGas?: BigNumberish;
    maxPriorityFeePerGas?: BigNumberish;
    paymasterAndData: BytesLike | "0x";
    signature: BytesLike;
}
export interface UserOperationStruct_v7 {
    sender: string;
    nonce: BigNumberish;
    factory?: string;
    factoryData?: BytesLike;
    callData: BytesLike;
    callGasLimit?: BigNumberish;
    verificationGasLimit?: BigNumberish;
    preVerificationGas?: BigNumberish;
    maxFeePerGas?: BigNumberish;
    maxPriorityFeePerGas?: BigNumberish;
    paymaster?: string;
    paymasterVerificationGasLimit?: BigNumberish;
    paymasterPostOpGasLimit?: BigNumberish;
    paymasterData?: BytesLike;
    signature: BytesLike;
}
export type UserOperationStruct<TEntryPointVersion extends EntryPointVersion = EntryPointVersion> = TEntryPointVersion extends "0.6.0" ? UserOperationStruct_v6 : TEntryPointVersion extends "0.7.0" ? UserOperationStruct_v7 : never;
//# sourceMappingURL=types.d.ts.map