import type { Chain } from "viem";
import type { EntryPointVersion } from "../entrypoint/types.js";
import { BaseError } from "./base.js";
export declare class AccountNotFoundError extends BaseError {
    name: string;
    constructor();
}
export declare class DefaultFactoryNotDefinedError extends BaseError {
    name: string;
    constructor(accountType: string, chain: Chain, version: EntryPointVersion);
}
export declare class GetCounterFactualAddressError extends BaseError {
    name: string;
    constructor();
}
export declare class UpgradesNotSupportedError extends BaseError {
    name: string;
    constructor(accountType: string);
}
export declare class SignTransactionNotSupportedError extends BaseError {
    name: string;
    constructor();
}
export declare class FailedToGetStorageSlotError extends BaseError {
    name: string;
    constructor(slot: string, slotDescriptor: string);
}
export declare class BatchExecutionNotSupportedError extends BaseError {
    name: string;
    constructor(accountType: string);
}
export declare class AccountRequiresOwnerError extends BaseError {
    name: string;
    constructor(accountType: string);
}
export declare class UpgradeToAndCallNotSupportedError extends BaseError {
    name: string;
    constructor(accountType: string);
}
export declare class IncorrectAccountType extends BaseError {
    name: string;
    constructor(expected: string, actual: string);
}
export declare class SmartAccountWithSignerRequiredError extends BaseError {
    name: string;
    constructor();
}
//# sourceMappingURL=account.d.ts.map