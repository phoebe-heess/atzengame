import type { UserOperationRequest, UserOperationStruct } from "../types.js";
import { BaseError } from "./base.js";
/**
 * Thrown when a {@link UserOperationStruct} is not a valid request
 *
 * extends viem BaseError
 */
export declare class InvalidUserOperationError extends BaseError {
    /**
     * @inheritdoc
     */
    name: string;
    /**
     * Creates an instance of InvalidUserOperationError.
     *
     * InvalidUserOperationError constructor
     *
     * @param uo the invalid user operation struct
     */
    constructor(uo: UserOperationStruct);
}
/**
 * Error thrown when waiting for user operation request to be mined.
 *
 * Includes the internal error as well as the request that failed. This request
 * can then be used with {@link dropAndReplaceUserOperation} to retry the operation.
 */
export declare class WaitForUserOperationError extends BaseError {
    request: UserOperationRequest;
    /**
     * @param request the user operation request that failed
     * @param error the underlying error that caused the failure
     */
    constructor(request: UserOperationRequest, error: Error);
}
//# sourceMappingURL=useroperation.d.ts.map