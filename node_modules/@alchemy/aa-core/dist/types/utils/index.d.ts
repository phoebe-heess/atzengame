import type { Chain } from "viem";
import type { PromiseOrValue } from "../types.js";
import type { RecordableKeys } from "./types.js";
export declare const AlchemyChainMap: Map<number, Chain>;
/**
 * Utility method for converting a chainId to a {@link Chain} object
 *
 * @param chainId - the chainId to convert
 * @returns a {@link Chain} object for the given chainId
 * @throws if the chainId is not found
 */
export declare const getChain: (chainId: number) => Chain;
/**
 * Utility function that allows for piping a series of async functions together
 *
 * @param fns - functions to pipe
 * @returns result of the pipe
 */
export declare const asyncPipe: <S, O, F>(...fns: ((s: S, o?: O | undefined, f?: F | undefined) => Promise<S>)[]) => (s: S, o?: O | undefined, f?: F | undefined) => Promise<S>;
export type Deferrable<T> = {
    [K in keyof T]: PromiseOrValue<T[K]>;
};
/**
 * Await all of the properties of a {@link Deferrable} object
 *
 * @param object - a {@link Deferrable} object
 * @returns the object with its properties resolved
 */
export declare function resolveProperties<T>(object: Deferrable<T>): Promise<T>;
/**
 * Recursively converts all values in an object to hex strings
 *
 * @param obj - obj to deep hexlify
 * @returns object with all of its values hexlified
 */
export declare function deepHexlify(obj: any): any;
export declare function defineReadOnly<T, K extends keyof T>(object: T, key: K, value: T[K]): void;
export declare function filterUndefined<T>(obj: T): T;
export declare function pick(obj: Record<string, unknown>, keys: string | string[]): {};
/**
 * Utility method for checking if the passed in values are all equal (strictly)
 *
 * @param params - values to check
 * @returns a boolean indicating if all values are the same
 * @throws if no values are passed in
 */
export declare const allEqual: (...params: any[]) => boolean;
/**
 * Utility method for checking the condition and return the value if condition holds true, undefined if not.
 *
 * @param condition - condition to check
 * @param value - value to return when condition holds true
 * @returns the value if condition holds true, undefined if not
 */
export declare const conditionalReturn: <T>(condition: Promise<boolean>, value: () => Promise<T>) => Promise<T | undefined>;
export declare const toRecord: <T extends { [K in RecordableKeys<T>]: string | number | symbol; }, K_1 extends RecordableKeys<T>, V>(array: T[], selector: K_1, fn: (item: T) => V) => Record<T[K_1], V>;
export * from "./bigint.js";
export * from "./bytes.js";
export * from "./defaults.js";
export * from "./schema.js";
export type * from "./types.js";
export * from "./userop.js";
//# sourceMappingURL=index.d.ts.map